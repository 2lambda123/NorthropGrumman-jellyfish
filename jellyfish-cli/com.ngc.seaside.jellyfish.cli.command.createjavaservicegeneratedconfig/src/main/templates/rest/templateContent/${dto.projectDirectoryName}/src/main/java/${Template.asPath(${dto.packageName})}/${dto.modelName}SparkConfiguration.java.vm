package ${dto.packageName};

import com.ngc.seaside.service.transport.api.ITransportProvider;
import com.ngc.seaside.service.transport.api.TransportConfiguration;
import com.ngc.seaside.service.transport.impl.topic.spark.HttpVerb;
import com.ngc.seaside.service.transport.impl.topic.spark.SparkTopic;
import com.ngc.seaside.service.transport.impl.topic.spark.SparkTopics;
import ${dto.topicsImport};

public class ${dto.modelName}SparkConfiguration {

   private ${dto.modelName}SparkConfiguration() {
   }

   public static void configure(TransportConfiguration config, ITransportProvider<SparkTopic> sparkProvider) {
       SparkTopics factory = SparkTopics.boundToLocalhost(${topic.port});

#foreach ($topic in $dto.topics)
       SparkTopic ${topic.variableName} = factory.when(${topic.method})
             .onPath("${topic.path}")
             .accept(${topic.contentType})
             .respondWithType(${topic.contentType})
             .reportRootCauseExceptionsOnly()
             .build();

#end
#foreach ($entry in $dto.receiveTopics.entrySet())
#set ($name = $entry.key)
#set ($topics = $entry.value)
       config.whenReceiving()
             .withTransportProvider(sparkProvider)
#foreach ($topic in $topics)
             .onPhysicalTopic(${topic.variableName})
#end
             .enableResponses(true)
             .useApplicationTopic(t -> ${name});

#end
   }
}