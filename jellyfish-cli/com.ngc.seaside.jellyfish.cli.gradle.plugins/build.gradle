apply plugin: 'groovy'
apply plugin: 'maven'

configurations {
    commandTemplate
}

dependencies {
    implementation project(':jellyfish')
    implementation project(':jellyfish.api')
    implementation project(':jellyfish.utilities')
    implementation project(':guice.modules')
    implementation project(':jellyfish.service.impl.templateservice')

    implementation gradleApi()
    implementation localGroovy()
    implementation "com.ngc.seaside:systemdescriptor.service.impl.xtext:$version"
    implementation "com.ngc.seaside:gradle.plugins:$seasidePluginsVersion"
    implementation "com.ngc.blocs:service.api:$blocsCoreVersion"
    implementation "com.google.inject:guice:$guiceVersion"

    commandTemplate project(path: ':jellyfish.cli.command.createjavadistribution', configuration: 'commandTemplate')
    commandTemplate project(path: ':jellyfish.cli.command.createjellyfishcommand', configuration: 'commandTemplate')
    commandTemplate project(path: ':jellyfish.cli.command.createprotocolbuffermessages', configuration: 'commandTemplate')
    commandTemplate project(path: ':jellyfish.cli.command.createjellyfishgradleproject', configuration: 'commandTemplate')
    commandTemplate project(path: ':jellyfish.cli.command.createjavaevents', configuration: 'commandTemplate')
    commandTemplate project(path: ':jellyfish.cli.command.createjavaprotobufconnector', configuration: 'commandTemplate')
    commandTemplate project(path: ':jellyfish.cli.command.report.requirementsverification', configuration: 'commandTemplate')
    commandTemplate project(path: ':jellyfish.cli.command.report.requirementsallocation', configuration: 'commandTemplate')
    commandTemplate project(path: ':jellyfish.cli.command.createjavaservice', configuration: 'commandTemplate')
    commandTemplate project(path: ':jellyfish.cli.command.createjavaserviceproject', configuration: 'commandTemplate')
    commandTemplate project(path: ':jellyfish.cli.command.createjavaservicebase', configuration: 'commandTemplate')
    commandTemplate project(path: ':jellyfish.cli.command.createjavaserviceconfig', configuration: 'commandTemplate')
    commandTemplate project(path: ':jellyfish.cli.command.createjavaservicegeneratedconfig', configuration: 'commandTemplate')
    commandTemplate project(path: ':jellyfish.cli.command.createjavacucumbertests', configuration: 'commandTemplate')
    commandTemplate project(path: ':jellyfish.cli.command.createdomain', configuration: 'commandTemplate')
}

// Include the command templates in the JAR.
jar {
    from "${buildDir}/commands-templates/"
}

processResources {
    expand(version: version)
}

task copyCommandTemplate(type: Copy) {
    from configurations.commandTemplate {
        rename { name ->
            def artifacts = configurations.commandTemplate.resolvedConfiguration.resolvedArtifacts
            def artifact = artifacts.find { it.file.name == name }
            "${artifact.moduleVersion.id.group}.${artifact.name}-${artifact.moduleVersion.id.version}-${artifact.classifier}.${artifact.extension}"
        }
    }
    into "${buildDir}/commands-templates/templates/"
}

jar.dependsOn(copyCommandTemplate)
