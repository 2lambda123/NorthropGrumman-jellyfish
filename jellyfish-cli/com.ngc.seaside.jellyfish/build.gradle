apply plugin: 'com.ngc.seaside.application'

configurations {
    commandTemplate
    resources
}

dependencies {
    api project(':jellyfish.api')

    implementation "com.ngc.seaside:systemdescriptor.service.impl.xtext:$version"
    implementation "com.ngc.seaside:systemdescriptor.service.impl.m2repositoryservice:$version"

    implementation "com.ngc.blocs:service.log.impl.common.logservice:$blocsVersion"
    implementation "com.ngc.blocs:service.resource.impl.common.resourceservice:$blocsVersion"

    implementation "org.osgi:osgi.core:$osgiVersion"
    implementation "org.osgi:osgi.enterprise:$osgiVersion"
    implementation "com.google.inject:guice:$guiceVersion"
    implementation "com.google.inject.extensions:guice-multibindings:$guiceVersion"

    implementation project(':jellyfish.impl.provider')
    implementation "com.ngc.seaside:systemdescriptor.scenario.impl.standardsteps:$version"

    implementation project(':jellyfish.cli.command.validate')

    implementation project(':jellyfish.cli.command.samplecommand')
    commandTemplate project(path: ':jellyfish.cli.command.samplecommand', configuration: 'commandTemplate')

    implementation project(':jellyfish.cli.command.createjavadistribution')
    commandTemplate project(path: ':jellyfish.cli.command.createjavadistribution', configuration: 'commandTemplate')

    implementation project(':jellyfish.cli.command.createjellyfishcommand')
    commandTemplate project(path: ':jellyfish.cli.command.createjellyfishcommand', configuration: 'commandTemplate')

    implementation project(':jellyfish.cli.command.createdomain')
    commandTemplate project(path: ':jellyfish.cli.command.createdomain', configuration: 'commandTemplate')

    implementation project(':jellyfish.cli.command.createprotocolbuffermessages')
    commandTemplate project(path: ':jellyfish.cli.command.createprotocolbuffermessages', configuration: 'commandTemplate')

    implementation project(':jellyfish.cli.command.createjellyfishgradleproject')
    commandTemplate project(path: ':jellyfish.cli.command.createjellyfishgradleproject', configuration: 'commandTemplate')

    implementation project(':jellyfish.cli.command.createjavaevents')
    commandTemplate project(path: ':jellyfish.cli.command.createjavaevents', configuration: 'commandTemplate')

    implementation project(':jellyfish.cli.command.createjavapubsubconnector')
    commandTemplate project(path: ':jellyfish.cli.command.createjavapubsubconnector', configuration: 'commandTemplate')

    implementation project(':jellyfish.cli.command.report.requirementsverification')
    commandTemplate project(path: ':jellyfish.cli.command.report.requirementsverification', configuration: 'commandTemplate')

    implementation project(':jellyfish.cli.command.report.requirementsallocation')
    commandTemplate project(path: ':jellyfish.cli.command.report.requirementsallocation', configuration: 'commandTemplate')

    implementation project(':jellyfish.cli.command.createjavaservice')
    commandTemplate project(path: ':jellyfish.cli.command.createjavaservice', configuration: 'commandTemplate')

    implementation project(':jellyfish.cli.command.createjavaserviceproject')
    commandTemplate project(path: ':jellyfish.cli.command.createjavaserviceproject', configuration: 'commandTemplate')

    implementation project(':jellyfish.cli.command.createjavaservicebase')
    commandTemplate project(path: ':jellyfish.cli.command.createjavaservicebase', configuration: 'commandTemplate')

    implementation project(':jellyfish.cli.command.createjavaserviceconfig')
    commandTemplate project(path: ':jellyfish.cli.command.createjavaserviceconfig', configuration: 'commandTemplate')

    implementation project(':jellyfish.cli.command.createjavacucumbertests')
    commandTemplate project(path: ':jellyfish.cli.command.createjavacucumbertests', configuration: 'commandTemplate')

    implementation project(':guice.modules')
    implementation project(':jellyfish.service.name.impl.namingservices')
    implementation project(':jellyfish.service.codegen.impl.codegenservices')
    implementation project(':jellyfish.service.scenario.impl.scenarioservice')
    implementation project(':jellyfish.service.data.impl.dataservice')
    implementation project(':jellyfish.service.config.impl.transportconfigurationservice')
    implementation project(':jellyfish.service.requirements.impl.requirementsservice')
    implementation project(':jellyfish.service.feature.impl.featureservice')
    implementation project(':jellyfish.service.buildmgmt.impl.buildmgmtservice')

    implementation project(':jellyfish.service.impl.parameterservice')
    implementation project(':jellyfish.service.impl.promptuserservice')
    implementation project(':jellyfish.service.impl.propertyservice')
    implementation project(':jellyfish.service.impl.templateservice')

    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
}

/**
 * Copy the archive to the distribution directory and rename it to contain the groupId prefix.
 */
task copyCommandTemplate(type: Copy) {
    from configurations.commandTemplate {
        rename { name ->
            def artifacts = configurations.commandTemplate.resolvedConfiguration.resolvedArtifacts
            def artifact = artifacts.find { it.file.name == name }
            "${artifact.moduleVersion.id.group}.${artifact.name}-${artifact.moduleVersion.id.version}-${artifact.classifier}.${artifact.extension}"
        }
    }
    into "${buildDir}/commands-templates/templates/"
}

seasideApplication {
    mainClassName = 'com.ngc.seaside.jellyfish.JellyFish'
    includeDistributionDirs = ['src/main/resources/', "$buildDir/commands-templates/"]
    appHomeVarName = 'appHome'
    appSystemProperties = [NG_FW_HOME: "APP_HOME_VAR"]
    distributionName = "${project.name}-${project.version}"
    installationDir = "build/distributions/${project.name}-${project.version}"

    windows {
        appHomeCmd = "%~dp0.."
    }
    unix {
        appHomeCmd = "pwd -P"
    }
}

copyApplicationResources {
    dependsOn copyCommandTemplate
}

