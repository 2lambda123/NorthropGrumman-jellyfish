/**
 * UNCLASSIFIED
 *
 * Copyright 2020 Northrop Grumman Systems Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package com.ngc.seaside.threateval

import com.ngc.seaside.defendedarea.DefendedAreaSystem
import com.ngc.seaside.threateval.DefendedAreaTrackPriorityService
import com.ngc.seaside.threateval.ClassificationTrackPriorityService
import com.ngc.seaside.threateval.EngagementTrackPriorityService
import com.ngc.seaside.threateval.TrackPriorityService
import com.ngc.seaside.common.datatype.SystemTrack
import com.ngc.seaside.classifier.datatype.Classification
import com.ngc.seaside.engagementplanning.datatype.TrackEngagementStatus
import com.ngc.seaside.threateval.datatype.PrioritizedSystemTrackIdentifiers
import com.ngc.seaside.common.datatype.DroppedSystemTrack
import com.ngc.seaside.defendedarea.datatype.ImpactAssessment
import com.ngc.seaside.threateval.datatype.TrackPriorityRequest
import com.ngc.seaside.threateval.datatype.TrackPriorityResponse

model ThreatEvaluation {
	metadata {
			"description" : "Prioritizes system tracks into a list of System Track Identifiers",
			"stereotypes" : [ "virtual", "system" ],
			"satisfies" : [ "TE001" ],
			"codegen" : {
					"alias" : "te"
			}
	}

	input {
		SystemTrack systemTrack {
			metadata {
				"satisfies" : [ "TE001" ]
			}
		}

		Classification systemTrackClassification {
			metadata {
				"satisfies" : [ "TE001" ]
			}
		}

		TrackEngagementStatus trackEngagementStatus {
			metadata {
				"satisfies" : [ "TE001" ]
			}
		}

		ImpactAssessment impactAssessment
		DroppedSystemTrack droppedSystemTrack
		TrackPriorityRequest trackPriorityRequest
	}

	output {
		PrioritizedSystemTrackIdentifiers prioritizedSystemTracks {
			metadata {
				"satisfies" : [ "TE001" ]
			}
		}

		TrackPriorityResponse trackPriorityResponse
	}

	parts {
		DefendedAreaTrackPriorityService defendedAreaTrackPriorityService
		ClassificationTrackPriorityService classificationTrackPriorityService
		EngagementTrackPriorityService engagementTrackPriorityService
		TrackPriorityService trackPriorityService
	}

	requires {
		DefendedAreaSystem defendedAreaSystem
	}

	scenario calculateTrackPriorityWithClassification {
	   when receiving systemTrackClassification
	   then willPublish prioritizedSystemTracks
	}

	scenario calculateTrackPriorityWithEngagementStatus {
      when receiving trackEngagementStatus
      then willPublish prioritizedSystemTracks
   }

   scenario calculateTrackPriorityWithImpactAssessment {
      when receiving impactAssessment
      and receiving systemTrack
      and correlating systemTrack.header.correlationEventId to impactAssessment.header.correlationEventId
      then willPublish prioritizedSystemTracks
      and willBeginCorrelationEvent identified by prioritizedSystemTracks.header.correlationEventId
   }

	scenario recalcuatePriorityAfterTrackDropped {
		when receiving droppedSystemTrack
		then willCorrelate droppedSystemTrack.header.correlationEventId to prioritizedSystemTracks.header.correlationEventId
		and willPublish prioritizedSystemTracks
		and willBeCompleted within 1 seconds
	}

	scenario getTrackPriorities {
		when receivingRequest trackPriorityRequest
		then willRespond with trackPriorityResponse
	}

	links {
		link a systemTrack -> defendedAreaTrackPriorityService.systemTrack
		link b impactAssessment -> defendedAreaTrackPriorityService.impactAssessment
		link c defendedAreaSystem.defendedAreaService -> defendedAreaTrackPriorityService.defendedAreaService
		link d systemTrackClassification -> classificationTrackPriorityService.systemTrackClassification
		link e trackEngagementStatus -> engagementTrackPriorityService.trackEngagementStatus
		link f trackPriorityService.prioritizedSystemTracks -> prioritizedSystemTracks
		link g defendedAreaTrackPriorityService.trackPriority -> trackPriorityService.trackPriority
		link h classificationTrackPriorityService.trackPriority -> trackPriorityService.trackPriority
		link i engagementTrackPriorityService.trackPriority -> trackPriorityService.trackPriority
		link j droppedSystemTrack -> trackPriorityService.droppedSystemTrack
		link k trackPriorityRequest -> trackPriorityService.trackPriorityRequest
		link l trackPriorityService.trackPriorityResponse -> trackPriorityResponse
	}

}
