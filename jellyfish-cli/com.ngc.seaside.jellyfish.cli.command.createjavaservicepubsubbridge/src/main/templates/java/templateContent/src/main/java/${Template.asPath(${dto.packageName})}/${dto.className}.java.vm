package com.ngc.seaside.threateval.tps.bridge.pubsub;

import com.google.common.base.Preconditions;

import com.ngc.blocs.service.event.api.IEvent;
import com.ngc.blocs.service.event.api.IEventService;
import com.ngc.blocs.service.event.api.IEventSubscriber;
import com.ngc.blocs.service.log.api.ILogService;
import com.ngc.seaside.service.fault.api.IFaultManagementService;
import com.ngc.seaside.service.fault.api.ServiceFaultException;
import com.ngc.seaside.threateval.tps.api.ITrackPriorityService;
import com.ngc.seaside.threateval.tps.event.datatype.PrioritizedSystemTrackIdentifiers;
import com.ngc.seaside.threateval.tps.event.datatype.TrackPriority;

import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Deactivate;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.component.annotations.ReferenceCardinality;
import org.osgi.service.component.annotations.ReferencePolicy;

@Component(service = IEventSubscriber.class, immediate = true)
public class TrackPrioritySubscriber implements IEventSubscriber<TrackPriority> {

   private ITrackPriorityService trackPriorityService;

   private IEventService eventService;

   private ILogService logService;

   private IFaultManagementService faultManagementService;

   @Override
   public void eventReceived(IEvent<TrackPriority> event) {
      Preconditions.checkNotNull(event, "event may not be null!");
      TrackPriority input = Preconditions.checkNotNull(event.getSource(), "event source may not be null!");
      try {
         PrioritizedSystemTrackIdentifiers output = trackPriorityService. calculateConsolidatedTrackPriority(input);
         logService.info(getClass(), "ELK - Scenario: calculateConsolidatedTrackPriority; Input: %s; Output: %s;", input, output);
         eventService.publish(output, PrioritizedSystemTrackIdentifiers.TOPIC);
      } catch(ServiceFaultException fault) {
         faultManagementService.handleFault(fault);
      }
   }

   @Activate
   public void activate() {
      eventService.addSubscriber(this, TrackPriority.TOPIC);
      logService.debug(getClass(), "Activated.");
   }

   @Deactivate
   public void deactivate() {
      eventService.removeSubscriber(this, TrackPriority.TOPIC);
      logService.debug(getClass(), "Deactivated.");
   }

   @Reference(cardinality = ReferenceCardinality.MANDATORY,
         policy = ReferencePolicy.STATIC,
         unbind = "removeTrackPriorityService")
   public void setTrackPriorityService(ITrackPriorityService ref) {
      this.trackPriorityService = ref;
   }

   public void removeTrackPriorityService(ITrackPriorityService ref) {
      setTrackPriorityService(null);
   }

   @Reference(cardinality = ReferenceCardinality.MANDATORY,
         policy = ReferencePolicy.STATIC,
         unbind = "removeEventService")
   public void setEventService(IEventService ref) {
      this.eventService = ref;
   }

   public void removeEventService(IEventService ref) {
      setEventService(null);
   }

   @Reference(cardinality = ReferenceCardinality.MANDATORY,
         policy = ReferencePolicy.STATIC,
         unbind = "removeLogService")
   public void setLogService(ILogService ref) {
      this.logService = ref;
   }

   public void removeLogService(ILogService ref) {
      setLogService(null);
   }

   @Reference(cardinality = ReferenceCardinality.MANDATORY,
         policy = ReferencePolicy.STATIC,
         unbind = "removeFaultManagementService")
   public void setFaultManagementService(IFaultManagementService ref) {
      this.faultManagementService = ref;
   }

   public void removeFaultManagementService(IFaultManagementService ref) {
      setFaultManagementService(null);
   }
}