/**
 * UNCLASSIFIED
 * Northrop Grumman Proprietary
 * ____________________________
 *
 * Copyright (C) 2018, Northrop Grumman Systems Corporation
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Northrop Grumman Systems Corporation. The intellectual and technical concepts
 * contained herein are proprietary to Northrop Grumman Systems Corporation and
 * may be covered by U.S. and Foreign Patents or patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Northrop Grumman.
 */
package com.ngc.seaside.threateval

import com.ngc.seaside.threateval.DefendedAreaTrackPriorityService
import com.ngc.seaside.threateval.ClassificationTrackPriorityService
import com.ngc.seaside.threateval.EngagementTrackPriorityService
import com.ngc.seaside.threateval.TrackPriorityService
import com.ngc.seaside.common.datatype.SystemTrack
import com.ngc.seaside.classifier.datatype.Classification
import com.ngc.seaside.engagementplanning.datatype.TrackEngagementStatus
import com.ngc.seaside.common.datatype.SystemTrackIdentifier
import com.ngc.seaside.threateval.datatype.PrioritizedSystemTrackIdentifiers

model ThreatEvaluation {
	metadata {
		"description": "Prioritizes system tracks into a list of System Track Identifiers",
		"stereotypes": ["virtual", "system"],
		"satisfies": ["TE001"]
	}
	
	input {
		SystemTrack systemTrack {
			"satisfies": ["TE001"]
		}
		
		Classification systemTrackClassification {
			"satisfies": ["TE001"]
		}
		
		TrackEngagementStatus trackEngagementStatus {
			"satisfies": ["TE001"]
		}
	}
	
	output {
		PrioritizedSystemTrackIdentifiers prioritizedSystemTracks {
			"satisfies": ["TE001"]
		}
	}
	
	parts {
		DefendedAreaTrackPriorityService defendedAreaTrackPriorityService
		ClassificationTrackPriorityService classificationTrackPriorityService
		EngagementTrackPriorityService engagementTrackPriorityService
		TrackPriorityService trackPriorityService
	}
	
	scenario calculateTrackPriority {
		when receiving systemTrack
		 and receiving systemTrackClassification
		 and receiving trackEngagementStatus
		then willPublish prioritizedSystemTracks
		 and willBeCompleted within 1 seconds
	}
	
	links {
		link systemTrack to defendedAreaTrackPriorityService.systemTrack
		link systemTrackClassification to classificationTrackPriorityService.systemTrackClassification
		link trackEngagementStatus to engagementTrackPriorityService.trackEngagementStatus
		link prioritizedSystemTracks to trackPriorityService.prioritizedSystemTracks
		link defendedAreaTrackPriorityService.trackPriority to trackPriorityService.trackPriority
		link classificationTrackPriorityService.trackPriority to trackPriorityService.trackPriority
		link engagementTrackPriorityService.trackPriority to trackPriorityService.trackPriority
	}
	
}