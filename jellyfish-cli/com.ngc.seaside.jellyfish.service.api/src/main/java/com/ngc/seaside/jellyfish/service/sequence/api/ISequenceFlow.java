/**
 * UNCLASSIFIED
 *
 * Copyright 2020 Northrop Grumman Systems Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package com.ngc.seaside.jellyfish.service.sequence.api;

import com.ngc.seaside.jellyfish.service.scenario.api.IMessagingFlow;
import com.ngc.seaside.jellyfish.service.scenario.api.IPublishSubscribeMessagingFlow;
import com.ngc.seaside.jellyfish.service.scenario.api.IRequestResponseMessagingFlow;
import com.ngc.seaside.systemdescriptor.model.api.model.IDataReferenceField;

import java.util.Collection;
import java.util.Optional;

/**
 * A sequence flow wraps an {@link IMessagingFlow} and adds additional information about how that flow is actually
 * implemented.  A sequence flow that has no implementation is usually generated by the present of a scenario in a
 * model.  A flow that this is implemented is implemented by delegating to its parts or requirements to actually
 * perform the behavior.  In this case, the model which contains the flow is usually a system.
 *
 * <p/>
 * A single {@link ISequence sequence} may contain multiple flows.  Flows within the same sequence which contains the
 * same {@link #getSequenceNumber() sequence number} are considered to happen concurrently.
 */
public interface ISequenceFlow {

   /**
    * Gets the messaging flow that is being wrapped.
    *
    * @return the messaging flow that is being wrapped
    */
   IMessagingFlow getMessagingFlow();

   /**
    * Gets the sequence number of this flow.  This value can be used to order the flows of an {@code ISequence}.  Flows
    * with lesser values happen before flows with greater values.  Flows which have the same sequence number happen
    * concurrently within the containing sequence.  Note that sequence numbers of flows contained by different sequences
    * <i>cannot</i> be compared.
    *
    * @return the sequence number of this flow
    */
   int getSequenceNumber();

   /**
    * Gets the inputs to this flow.
    *
    * @return the inputs to this flow
    * @see IPublishSubscribeMessagingFlow#getInputs()
    * @see IRequestResponseMessagingFlow#getInput()
    */
   Collection<IDataReferenceField> getInputs();

   /**
    * Gets the outputs of this flow.
    *
    * @return the outputs of this flow
    * @see IPublishSubscribeMessagingFlow#getOutputs()
    * @see IRequestResponseMessagingFlow#getOutput()
    */
   Collection<IDataReferenceField> getOutputs();

   /**
    * Gets an optional which contains the implementation of this flow if this flow is implemented.
    *
    * @return an optional which contains the implementation of this flow or an empty optional if this flow is not
    * implemented
    */
   Optional<ISequenceFlowImplementation> getImplementation();
}
