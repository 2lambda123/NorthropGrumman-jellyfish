/**
 * UNCLASSIFIED
 * Northrop Grumman Proprietary
 * ____________________________
 *
 * Copyright (C) 2019, Northrop Grumman Systems Corporation
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Northrop Grumman Systems Corporation. The intellectual and technical concepts
 * contained herein are proprietary to Northrop Grumman Systems Corporation and
 * may be covered by U.S. and Foreign Patents or patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Northrop Grumman.
 */
package com.ngc.seaside.jellyfish.service.buildmgmt.api;

import com.ngc.seaside.jellyfish.api.ICommandOptions;
import com.ngc.seaside.jellyfish.api.ICommandOptions;
import com.ngc.seaside.jellyfish.service.name.api.IProjectInformation;

import java.util.Collection;

/**
 * The build management service is responsible for manging build information for <i>generated</i> projects.  Commands
 * use this service to option information about dependencies when these commands generate projects.  Commands can use
 * the {@link #registerDependency(ICommandOptions, String) register} operations to both obtain information
 * about a dependencies and record that that dependency is required to build the newly generated project.
 * <p/>
 * Commands also use this service to {@link #registerProject(ICommandOptions, IProjectInformation) register
 * projects} that are generated by the command.
 */
public interface IBuildManagementService {

   /**
    * Gets all dependencies of the given scope that have been {@link #registerDependency(ICommandOptions,
    * String) registered}.
    *
    * @param options the options used in the current invocation of Jellyfish
    * @param scope   the type of dependencies to get
    * @return the registered dependencies of the given type
    */
   Collection<IBuildDependency> getRegisteredDependencies(ICommandOptions options, DependencyScope scope);

   /**
    * Gets the dependency with the given group and artifact ID and registers the dependency as required.  Once this
    * operation is invoked, the dependency will be included in the results of {@link
    * #getRegisteredDependencies(ICommandOptions, DependencyScope)}.
    *
    * @param options    the options used in the current invocation of Jellyfish
    * @param groupId    the group ID of the dependency
    * @param artifactId the artifact ID of the dependency
    * @return the dependency with the given group and artifact ID
    * @throws IllegalArgumentException if no dependency with the given group ID and artifact ID has been configured
    */
   IBuildDependency registerDependency(ICommandOptions options, String groupId, String artifactId);

   /**
    * Gets the dependency with the given group and artifact ID and registers the dependency as required.  The format of
    * the group and artifact ID should be {@code <groupId>:<artifactId>}.  Once this operation is invoked, the
    * dependency will be included in the results of {@link #getRegisteredDependencies(ICommandOptions,
    * DependencyScope)}.
    *
    * @param options          the options used in the current invocation of Jellyfish
    * @param groupAndArtifact the group and artifact ID in the format {@code <groupId>:<artifactId>}
    * @return the dependency with the given group and artifact ID
    * @throws IllegalArgumentException if no dependency with the given group ID and artifact ID has been configured
    */
   IBuildDependency registerDependency(ICommandOptions options, String groupAndArtifact);

   /**
    * Gets the dependency with the given group and artifact ID.  This operation does not {@link
    * #registerDependency(ICommandOptions, String, String) register} the dependency
    *
    * @param options    the options used in the current invocation of Jellyfish
    * @param groupId    the group ID of the dependency
    * @param artifactId the artifact ID of the dependency
    * @return the dependency with the given group and artifact ID
    * @throws IllegalArgumentException if no dependency with the given group ID and artifact ID has been configured
    */
   IBuildDependency getDependency(ICommandOptions options, String groupId, String artifactId);

   /**
    * Gets the dependency with the given group and artifact ID.  The format of the group and artifact ID should be
    * {@code <groupId>:<artifactId>}.  This operation does not {@link #registerDependency(ICommandOptions,
    * String) register} the dependency
    *
    * @param options          the options used in the current invocation of Jellyfish
    * @param groupAndArtifact the group and artifact ID in the format {@code <groupId>:<artifactId>}
    * @return the dependency with the given group and artifact ID
    * @throws IllegalArgumentException if no dependency with the given group ID and artifact ID has been configured
    */
   IBuildDependency getDependency(ICommandOptions options, String groupAndArtifact);

   /**
    * Gets all projects that have been registered via {@link #registerProject(ICommandOptions,
    * IProjectInformation)}.
    *
    * @return all projects that have been registered
    */
   Collection<IProjectInformation> getRegisteredProjects();

   /**
    * Registers the given project.
    *
    * @param options the options used in the current invocation of Jellyfish
    * @param project the project to register
    */
   void registerProject(ICommandOptions options, IProjectInformation project);
}
