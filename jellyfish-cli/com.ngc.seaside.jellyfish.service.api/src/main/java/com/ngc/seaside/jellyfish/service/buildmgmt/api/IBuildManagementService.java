/**
 * UNCLASSIFIED
 *
 * Copyright 2020 Northrop Grumman Systems Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package com.ngc.seaside.jellyfish.service.buildmgmt.api;

import com.ngc.seaside.jellyfish.api.ICommandOptions;
import com.ngc.seaside.jellyfish.api.ICommandOptions;
import com.ngc.seaside.jellyfish.service.name.api.IProjectInformation;

import java.util.Collection;

/**
 * The build management service is responsible for manging build information for <i>generated</i> projects.  Commands
 * use this service to option information about dependencies when these commands generate projects.  Commands can use
 * the {@link #registerDependency(ICommandOptions, String) register} operations to both obtain information
 * about a dependencies and record that that dependency is required to build the newly generated project.
 * <p/>
 * Commands also use this service to {@link #registerProject(ICommandOptions, IProjectInformation) register
 * projects} that are generated by the command.
 */
public interface IBuildManagementService {

   /**
    * Gets all dependencies of the given scope that have been {@link #registerDependency(ICommandOptions,
    * String) registered}.
    *
    * @param options the options used in the current invocation of Jellyfish
    * @param scope   the type of dependencies to get
    * @return the registered dependencies of the given type
    */
   Collection<IBuildDependency> getRegisteredDependencies(ICommandOptions options, DependencyScope scope);

   /**
    * Gets the dependency with the given group and artifact ID and registers the dependency as required.  Once this
    * operation is invoked, the dependency will be included in the results of {@link
    * #getRegisteredDependencies(ICommandOptions, DependencyScope)}.
    *
    * @param options    the options used in the current invocation of Jellyfish
    * @param groupId    the group ID of the dependency
    * @param artifactId the artifact ID of the dependency
    * @return the dependency with the given group and artifact ID
    * @throws IllegalArgumentException if no dependency with the given group ID and artifact ID has been configured
    */
   IBuildDependency registerDependency(ICommandOptions options, String groupId, String artifactId);

   /**
    * Gets the dependency with the given group and artifact ID and registers the dependency as required.  The format of
    * the group and artifact ID should be {@code <groupId>:<artifactId>}.  Once this operation is invoked, the
    * dependency will be included in the results of {@link #getRegisteredDependencies(ICommandOptions,
    * DependencyScope)}.
    *
    * @param options          the options used in the current invocation of Jellyfish
    * @param groupAndArtifact the group and artifact ID in the format {@code <groupId>:<artifactId>}
    * @return the dependency with the given group and artifact ID
    * @throws IllegalArgumentException if no dependency with the given group ID and artifact ID has been configured
    */
   IBuildDependency registerDependency(ICommandOptions options, String groupAndArtifact);

   /**
    * Gets the dependency with the given group and artifact ID.  This operation does not {@link
    * #registerDependency(ICommandOptions, String, String) register} the dependency
    *
    * @param options    the options used in the current invocation of Jellyfish
    * @param groupId    the group ID of the dependency
    * @param artifactId the artifact ID of the dependency
    * @return the dependency with the given group and artifact ID
    * @throws IllegalArgumentException if no dependency with the given group ID and artifact ID has been configured
    */
   IBuildDependency getDependency(ICommandOptions options, String groupId, String artifactId);

   /**
    * Gets the dependency with the given group and artifact ID.  The format of the group and artifact ID should be
    * {@code <groupId>:<artifactId>}.  This operation does not {@link #registerDependency(ICommandOptions,
    * String) register} the dependency
    *
    * @param options          the options used in the current invocation of Jellyfish
    * @param groupAndArtifact the group and artifact ID in the format {@code <groupId>:<artifactId>}
    * @return the dependency with the given group and artifact ID
    * @throws IllegalArgumentException if no dependency with the given group ID and artifact ID has been configured
    */
   IBuildDependency getDependency(ICommandOptions options, String groupAndArtifact);

   /**
    * Gets all projects that have been registered via {@link #registerProject(ICommandOptions,
    * IProjectInformation)}.
    *
    * @return all projects that have been registered
    */
   Collection<IProjectInformation> getRegisteredProjects();

   /**
    * Registers the given project.
    *
    * @param options the options used in the current invocation of Jellyfish
    * @param project the project to register
    */
   void registerProject(ICommandOptions options, IProjectInformation project);
}
