/**
 * UNCLASSIFIED
 * Northrop Grumman Proprietary
 * ____________________________
 *
 * Copyright (C) 2019, Northrop Grumman Systems Corporation
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Northrop Grumman Systems Corporation. The intellectual and technical concepts
 * contained herein are proprietary to Northrop Grumman Systems Corporation and
 * may be covered by U.S. and Foreign Patents or patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Northrop Grumman.
 */
package com.ngc.seaside.threateval

import com.ngc.seaside.common.datatype.DroppedSystemTrack
import com.ngc.seaside.threateval.datatype.PrioritizedSystemTrackIdentifiers
import com.ngc.seaside.threateval.datatype.TrackPriority
import com.ngc.seaside.threateval.datatype.TrackPriorityRequest
import com.ngc.seaside.threateval.datatype.TrackPriorityResponse

model TrackPriorityService {
	metadata {
		"description": "Aggregates track priorities from 1..n sources and upon request will provide a set of prioritized track IDs.",
		"stereotypes": ["service", "aggregator"],
		"satisfies": ["TE001.1", "TE001.2", "TE001.3", "TE001.4", "TE001.5"],
		"codegen": {
			"alias": "tps"
		}
	}
	
	input {
		TrackPriority trackPriority
		DroppedSystemTrack droppedSystemTrack
		
		TrackPriorityRequest trackPriorityRequest
	}
	
	output {
		PrioritizedSystemTrackIdentifiers prioritizedSystemTracks
		TrackPriorityResponse trackPriorityResponse
	}
	
	scenario calculateConsolidatedTrackPriority {
		metadata {
			"see": {"url": "http://10.207.42.43/confluence/display/SEAS/Track+Priority+Consolidation" } // TODO: need to find a way to stamp a version
		}
		when receiving trackPriority
		then willCorrelate trackPriority.header.correlationEventId to prioritizedSystemTracks.header.correlationEventId
		 and willPublish prioritizedSystemTracks
		 and willBeCompleted within 500 milliseconds
	}
	
	scenario calculateConsolidatedTrackPriorityWhenTrackDropped {
		when receiving droppedSystemTrack
		then willCorrelate trackPriority.header.correlationEventId to prioritizedSystemTracks.header.correlationEventId 
		 and willPublish prioritizedSystemTracks
		 and willBeCompleted within 500 milliseconds
	}
	
	scenario getTrackPriorities {
		when receivingRequest trackPriorityRequest
		then willRespond with trackPriorityResponse
	}
}