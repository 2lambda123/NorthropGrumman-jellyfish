package com.ngc.seaside.threateval

import com.ngc.seaside.defendedarea.DefendedAreaSystem
import com.ngc.seaside.threateval.DefendedAreaTrackPriorityService
import com.ngc.seaside.threateval.ClassificationTrackPriorityService
import com.ngc.seaside.threateval.EngagementTrackPriorityService
import com.ngc.seaside.threateval.TrackPriorityService
import com.ngc.seaside.common.datatype.SystemTrack
import com.ngc.seaside.classifier.datatype.Classification
import com.ngc.seaside.engagementplanning.datatype.TrackEngagementStatus
import com.ngc.seaside.threateval.datatype.PrioritizedSystemTrackIdentifiers
import com.ngc.seaside.common.datatype.DroppedSystemTrack
import com.ngc.seaside.defendedarea.datatype.ImpactAssessment
import com.ngc.seaside.threateval.datatype.TrackPriority
import com.ngc.seaside.threateval.datatype.TrackPriorityRequest
import com.ngc.seaside.threateval.datatype.TrackPriorityResponse

model ThreatEvaluation {
	metadata {
		"description": "Prioritizes system tracks into a list of System Track Identifiers",
		"stereotypes": ["virtual", "system"],
		"satisfies": ["TE001"],
		"codegen": {
			"alias": "te"
		}
	}

	input {
		SystemTrack systemTrack {
			 metadata {
				 "satisfies": ["TE001"]
				 }
		}

		Classification systemTrackClassification {
			 metadata {
				 "satisfies": ["TE001"]
				 }
		}

		TrackEngagementStatus trackEngagementStatus {
			 metadata {
				 "satisfies": ["TE001"]
				 }
		}

		ImpactAssessment impactAssessment

		DroppedSystemTrack droppedSystemTrack

		TrackPriority trackPriority
		TrackPriorityRequest trackPriorityRequest
	}

	output {
		PrioritizedSystemTrackIdentifiers prioritizedSystemTracks {
			 metadata {
				 "satisfies": ["TE001"]
				}
		}

		TrackPriorityResponse trackPriorityResponse
	}

	parts {
		/*private*/ DefendedAreaTrackPriorityService defendedAreaTrackPriorityService
		/*private*/ ClassificationTrackPriorityService classificationTrackPriorityService
		/*private*/ EngagementTrackPriorityService engagementTrackPriorityService
		/*private*/ TrackPriorityService trackPriorityService
	}

	requires {
		DefendedAreaSystem defendedAreaSystem
	}

	scenario calculateTrackPriority {
		when receiving systemTrack
		 and receiving impactAssessment
		 and receiving systemTrackClassification
		 and receiving trackEngagementStatus
		 and correlating systemTrack.header.correlationEventId to impactAssessment.header.correlationEventId // TODO TH: should correlation be a concern at this level?
		then willBeginCorrelationEvent identified by prioritizedSystemTracks.header.correlationEventId
		 and willPublish prioritizedSystemTracks
		 and willBeCompleted within 1 seconds
	}

	scenario getTrackPriorities {
		when receivingRequest trackPriorityRequest
		then willRespond with trackPriorityResponse
	}

	links {
		link systemTrack -> defendedAreaTrackPriorityService.systemTrack
		link impactAssessment -> defendedAreaTrackPriorityService.impactAssessment
		link defendedAreaSystem.defendedAreaService -> defendedAreaTrackPriorityService.defendedAreaService
		link systemTrackClassification -> classificationTrackPriorityService.systemTrackClassification
		link trackEngagementStatus -> engagementTrackPriorityService.trackEngagementStatus
		link trackPriorityService.prioritizedSystemTracks -> prioritizedSystemTracks
		link defendedAreaTrackPriorityService.trackPriority -> trackPriorityService.trackPriority
		link classificationTrackPriorityService.trackPriority -> trackPriorityService.trackPriority
		link engagementTrackPriorityService.trackPriority -> trackPriorityService.trackPriority
		link droppedSystemTrack -> trackPriorityService.droppedSystemTrack
		link trackPriorityRequest -> trackPriorityService.trackPriorityRequest
		link trackPriorityService.trackPriorityResponse -> trackPriorityResponse
	}
}
