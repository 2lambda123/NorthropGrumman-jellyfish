package com.ngc.seaside.threateval

import com.ngc.seaside.threateval.DefendedAreaTrackPriorityService
import com.ngc.seaside.threateval.ClassificationTrackPriorityService
import com.ngc.seaside.threateval.EngagementTrackPriorityService
import com.ngc.seaside.threateval.TrackPriorityService
import com.ngc.seaside.common.datatype.SystemTrack
import com.ngc.seaside.classifier.datatype.Classification
import com.ngc.seaside.engagementplanning.datatype.TrackEngagementStatus
import com.ngc.seaside.threateval.datatype.PrioritizedSystemTrackIdentifiers
import com.ngc.seaside.common.datatype.DroppedSystemTrack

model ThreatEvaluation {
	metadata {
		"description": "Prioritizes system tracks into a list of System Track Identifiers",
		"stereotypes": ["virtual", "system"],
		"satisfies": ["TE001"],
		"codegen": {
			"alias": "te"
		}
	}
	
	input {
		SystemTrack systemTrack {
		   metadata {
			   "satisfies": ["TE001"]
			}
		}
		
		Classification systemTrackClassification {
		   metadata {
			   "satisfies": ["TE001"]
			}
		}
		
		TrackEngagementStatus trackEngagementStatus {
		   metadata {
			   "satisfies": ["TE001"]
			}
		}
		
		DroppedSystemTrack droppedSystemTrack
	}
	
	output {
		PrioritizedSystemTrackIdentifiers prioritizedSystemTracks {
		   metadata {
			   "satisfies": ["TE001"]
			}
		}
	}
	
	parts {
		DefendedAreaTrackPriorityService defendedAreaTrackPriorityService
		ClassificationTrackPriorityService classificationTrackPriorityService
		EngagementTrackPriorityService engagementTrackPriorityService
		TrackPriorityService trackPriorityService
	}
	
	scenario calculateTrackPriority {
		when receiving systemTrack
		 and receiving systemTrackClassification
		 and receiving trackEngagementStatus
		then willPublish prioritizedSystemTracks
		 and willBeCompleted within 1 seconds
	}
	
	links {
		link systemTrack -> defendedAreaTrackPriorityService.systemTrack
		link systemTrackClassification -> classificationTrackPriorityService.systemTrackClassification
		link trackEngagementStatus -> engagementTrackPriorityService.trackEngagementStatus
		link prioritizedSystemTracks -> trackPriorityService.prioritizedSystemTracks
		link defendedAreaTrackPriorityService.trackPriority -> trackPriorityService.trackPriority
		link classificationTrackPriorityService.trackPriority -> trackPriorityService.trackPriority
		link engagementTrackPriorityService.trackPriority -> trackPriorityService.trackPriority
		link droppedSystemTrack -> trackPriorityService.droppedSystemTrack 
	}
	
}
