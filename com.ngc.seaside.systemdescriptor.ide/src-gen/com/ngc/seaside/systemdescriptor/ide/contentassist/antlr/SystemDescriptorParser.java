/*
 * generated by Xtext 2.10.0
 */
package com.ngc.seaside.systemdescriptor.ide.contentassist.antlr;

import com.google.inject.Inject;
import com.ngc.seaside.systemdescriptor.ide.contentassist.antlr.internal.InternalSystemDescriptorParser;
import com.ngc.seaside.systemdescriptor.services.SystemDescriptorGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class SystemDescriptorParser extends AbstractContentAssistParser {

	@Inject
	private SystemDescriptorGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSystemDescriptorParser createParser() {
		InternalSystemDescriptorParser result = new InternalSystemDescriptorParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getObjectValueAccess().getAlternatives(), "rule__ObjectValue__Alternatives");
					put(grammarAccess.getMetadataAccess().getGroup(), "rule__Metadata__Group__0");
					put(grammarAccess.getObjectAccess().getGroup(), "rule__Object__Group__0");
					put(grammarAccess.getObjectAccess().getGroup_2(), "rule__Object__Group_2__0");
					put(grammarAccess.getArrayAccess().getGroup(), "rule__Array__Group__0");
					put(grammarAccess.getArrayAccess().getGroup_2(), "rule__Array__Group_2__0");
					put(grammarAccess.getTerminalObjectAccess().getGroup(), "rule__TerminalObject__Group__0");
					put(grammarAccess.getModelAccess().getGreetingsAssignment(), "rule__Model__GreetingsAssignment");
					put(grammarAccess.getMetadataAccess().getTypeAssignment_0(), "rule__Metadata__TypeAssignment_0");
					put(grammarAccess.getMetadataAccess().getJsonAssignment_1(), "rule__Metadata__JsonAssignment_1");
					put(grammarAccess.getObjectAccess().getFirstObjectAssignment_1(), "rule__Object__FirstObjectAssignment_1");
					put(grammarAccess.getObjectAccess().getObjectsAssignment_2_1(), "rule__Object__ObjectsAssignment_2_1");
					put(grammarAccess.getArrayAccess().getFirstItemAssignment_1(), "rule__Array__FirstItemAssignment_1");
					put(grammarAccess.getArrayAccess().getItemsAssignment_2_1(), "rule__Array__ItemsAssignment_2_1");
					put(grammarAccess.getEmptyObjectAccess().getIsEmptyAssignment(), "rule__EmptyObject__IsEmptyAssignment");
					put(grammarAccess.getEmptyArrayAccess().getIsEmptyAssignment(), "rule__EmptyArray__IsEmptyAssignment");
					put(grammarAccess.getObjectValueAccess().getValueAssignment_0(), "rule__ObjectValue__ValueAssignment_0");
					put(grammarAccess.getTerminalObjectAccess().getElementAssignment_0(), "rule__TerminalObject__ElementAssignment_0");
					put(grammarAccess.getTerminalObjectAccess().getContentAssignment_2(), "rule__TerminalObject__ContentAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalSystemDescriptorParser typedParser = (InternalSystemDescriptorParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SystemDescriptorGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SystemDescriptorGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
