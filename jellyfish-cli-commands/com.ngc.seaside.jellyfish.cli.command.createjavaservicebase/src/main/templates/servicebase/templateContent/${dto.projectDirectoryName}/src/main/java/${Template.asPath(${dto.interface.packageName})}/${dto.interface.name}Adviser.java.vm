#*
 * UNCLASSIFIED
 *
 * Copyright 2020 Northrop Grumman Systems Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *#
package ${dto.interface.packageName};

import com.ngc.blocs.service.event.api.IEventTopic;
import com.ngc.seaside.service.readiness.api.IReadinessConfiguration;
import com.ngc.seaside.service.transport.api.ITransportConfiguration;
import com.ngc.seaside.service.transport.api.TransportConfiguration;
import ${dto.topicsEnum.packageName}.${dto.topicsEnum.name};

import java.util.Collections;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Set;

/**
 * This component acts as an adviser so developers can manually configure parts of the service that are generated
 * from a model.  This is useful for experimentation.  In many cases, services will supply an implementation of this
 * interface that does nothing.  Note an instance of this interface <i>must</i> be registered even if the implementation
 * does nothing.
 * <p/>
 * The methods below are invoked to alter the service's transport configuration, readiness configuration, and to
 * disable parts of the connector.  Implementations should be thread-safe as methods may be invoked concurrently.
 */
public interface ${dto.interface.name}Adviser {

   /**
    * Invoked to alter the transport configuration of the service.  The provided configuration is the default
    * configuration of the service.  The default implementation does nothing.
    * @param config the default generated transport configuration of the service
    * @return the transport configuration to use (typically, just return {@code config})
    */
   default ITransportConfiguration adviseTransportConfiguration(TransportConfiguration config) {
      return config;
   }

   /**
    * Invoked to alter the readiness configuration of the service.  The provided configuration is the default
    * configuration of the service.  The default implementation does nothing.
    * @param config the default generated readiness configuration of the service
    * @return the readiness configuration to use (typically, just return {@code config})
    */
   default IReadinessConfiguration adviseReadinessConfiguration(IReadinessConfiguration config) {
      return config;
   }

   /**
    * Invoked to alter the connector.  Use the context to selectively disable the handling of certain transport
    * or event topics by the connector.
    * @param ctx the context used to configure the connector
    */
   default void adviseConnector(ConnectorContext ctx) {
      // Default implementation does nothing.
   }

   /**
    * Context for configuring a connector.
    */
   class ConnectorContext {

      private final Set<${dto.topicsEnum.name}> disabledTransportTopics =
            Collections.synchronizedSet(EnumSet.noneOf(${dto.topicsEnum.name}.class));

      private final Set<IEventTopic<?>> disabledEventTopics = Collections.synchronizedSet(new HashSet<>());

      /**
       * Returns true if the connector should not perform operations related to the given transport topic.
       * @param topic the application topic
       * @return true if the connector should not perform operations related to the given transport topic
       */
      public boolean isTransportTopicDisabled(${dto.topicsEnum.name} topic) {
         return disabledTransportTopics.contains(topic);
      }

      /**
       * Configures the connector to not perform operations related to the given transport topic.
       * @param topic the application topic
       * @return this context
       */
      public ConnectorContext disableHandlingOfTransportTopic(${dto.topicsEnum.name} topic) {
         disabledTransportTopics.add(topic);
         return this;
      }

      /**
       * Returns true if the connector should not perform operations related to the given event topic.
       * @param topic the event topic
       * @return true if the connector should not perform operations related to the given event topic
       */
      public boolean isEventTopicDisabled(IEventTopic<?> topic) {
         return disabledEventTopics.contains(topic);
      }

      /**
       * Configures the connector to not perform operations related to the given event topic.
       * @param topic the event topic
       * @return this context
       */
      public ConnectorContext disableHandlingOfEventTopic(IEventTopic<?> topic) {
         disabledEventTopics.add(topic);
         return this;
      }
   }
}
