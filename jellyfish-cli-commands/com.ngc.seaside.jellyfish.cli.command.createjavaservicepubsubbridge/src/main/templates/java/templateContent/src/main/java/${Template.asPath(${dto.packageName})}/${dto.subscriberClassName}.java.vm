#*
 * UNCLASSIFIED
 *
 * Copyright 2020 Northrop Grumman Systems Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *#
package $dto.packageName;

#set ($ignore = $dto.imports.add("com.google.common.base.Preconditions"))
#set ($ignore = $dto.imports.add("com.ngc.blocs.service.event.api.IEvent"))
#set ($ignore = $dto.imports.add("com.ngc.blocs.service.event.api.IEventService"))
#set ($ignore = $dto.imports.add("com.ngc.blocs.service.event.api.IEventSubscriber"))
#set ($ignore = $dto.imports.add("com.ngc.blocs.service.log.api.ILogService"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.fault.api.IFaultManagementService"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.fault.api.ServiceFaultException"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.Activate"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.Component"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.Deactivate"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.Reference"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.ReferenceCardinality"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.ReferencePolicy"))

#foreach ($i in $dto.imports)
import ${i};
#end

@Component(service = IEventSubscriber.class, immediate = true)
public class ${dto.subscriberClassName} implements IEventSubscriber<${dto.subscriberDataType}> {

   private ${dto.service.typeName} ${dto.serviceVarName};

   private IEventService eventService;

   private ILogService logService;

   private IFaultManagementService faultManagementService;

#if (!$dto.isCorrelating())
   @Override
   public void eventReceived(IEvent<${dto.subscriberDataType}> event) {
      Preconditions.checkNotNull(event, "event may not be null!");
      ${dto.subscriberDataType} input = Preconditions.checkNotNull(event.getSource(), "event source may not be null!");
      try {
         ${dto.publishDataType} output = ${dto.serviceVarName}.${dto.scenarioMethod}(input);
         logService.info(getClass(), "ELK - Scenario: ${dto.scenarioMethod}; Input: %s; Output: %s;", input, output);
         eventService.publish(output, ${dto.publishDataType}.TOPIC);
      } catch(ServiceFaultException fault) {
         faultManagementService.handleFault(fault);
      }
   }
#else
   @Override
   public void eventReceived(IEvent<${dto.subscriberDataType}> event) {
      Preconditions.checkNotNull(event, "event may not be null!");
      ${dto.subscriberDataType} input = Preconditions.checkNotNull(event.getSource(), "event source may not be null!");
      try {
         Collection<${dto.publishDataType}> output = ${dto.serviceVarName}.${dto.scenarioMethod}(input);
         logService.info(getClass(), "ELK - Scenario: ${dto.scenarioMethod}; Input: %s; Output: %s;", input, output);
         output.forEach(o -> eventService.publish(o, ${dto.publishDataType}.TOPIC));
      } catch (ServiceFaultException fault) {
         faultManagementService.handleFault(fault);
      }
   }
#end

   @SuppressWarnings("unchecked")
   @Activate
   public void activate() {
      eventService.addSubscriber(this, ${dto.subscriberDataType}.TOPIC);
      logService.debug(getClass(), "Activated.");
   }

   @SuppressWarnings("unchecked")
   @Deactivate
   public void deactivate() {
      eventService.removeSubscriber(this, ${dto.subscriberDataType}.TOPIC);
      logService.debug(getClass(), "Deactivated.");
   }

   @Reference(cardinality = ReferenceCardinality.MANDATORY,
         policy = ReferencePolicy.STATIC,
         unbind = "${dto.unbinderSnippet}")
   public void ${dto.binderSnippet}(${dto.service.typeName} ref) {
      this.${dto.serviceVarName} = ref;
   }

   public void ${dto.unbinderSnippet}(${dto.service.typeName} ref) {
      ${dto.binderSnippet}(null);
   }

   @Reference(cardinality = ReferenceCardinality.MANDATORY,
         policy = ReferencePolicy.STATIC,
         unbind = "removeEventService")
   public void setEventService(IEventService ref) {
      this.eventService = ref;
   }

   public void removeEventService(IEventService ref) {
      setEventService(null);
   }

   @Reference(cardinality = ReferenceCardinality.MANDATORY,
         policy = ReferencePolicy.STATIC,
         unbind = "removeLogService")
   public void setLogService(ILogService ref) {
      this.logService = ref;
   }

   public void removeLogService(ILogService ref) {
      setLogService(null);
   }

   @Reference(cardinality = ReferenceCardinality.MANDATORY,
         policy = ReferencePolicy.STATIC,
         unbind = "removeFaultManagementService")
   public void setFaultManagementService(IFaultManagementService ref) {
      this.faultManagementService = ref;
   }

   public void removeFaultManagementService(IFaultManagementService ref) {
      setFaultManagementService(null);
   }
}
