#*
 * UNCLASSIFIED
 * Northrop Grumman Proprietary
 * ____________________________
 *
 * Copyright (C) 2019, Northrop Grumman Systems Corporation
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Northrop Grumman Systems Corporation. The intellectual and technical concepts
 * contained herein are proprietary to Northrop Grumman Systems Corporation and
 * may be covered by U.S. and Foreign Patents or patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Northrop Grumman.
 *#
${header.java}
package $dto.packageName;

#set ($ignore = $dto.imports.add("com.google.common.base.Preconditions"))
#set ($ignore = $dto.imports.add("com.ngc.blocs.service.event.api.IEvent"))
#set ($ignore = $dto.imports.add("com.ngc.blocs.service.event.api.IEventService"))
#set ($ignore = $dto.imports.add("com.ngc.blocs.service.event.api.IEventSubscriber"))
#set ($ignore = $dto.imports.add("com.ngc.blocs.service.log.api.ILogService"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.fault.api.IFaultManagementService"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.fault.api.ServiceFaultException"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.Activate"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.Component"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.Deactivate"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.Reference"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.ReferenceCardinality"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.ReferencePolicy"))

#foreach ($i in $dto.imports)
import ${i};
#end

@Component(service = IEventSubscriber.class, immediate = true)
public class ${dto.subscriberClassName} implements IEventSubscriber<${dto.subscriberDataType}> {

   private ${dto.service.typeName} ${dto.serviceVarName};

   private IEventService eventService;

   private ILogService logService;

   private IFaultManagementService faultManagementService;

#if (!$dto.isCorrelating())
   @Override
   public void eventReceived(IEvent<${dto.subscriberDataType}> event) {
      Preconditions.checkNotNull(event, "event may not be null!");
      ${dto.subscriberDataType} input = Preconditions.checkNotNull(event.getSource(), "event source may not be null!");
      try {
         ${dto.publishDataType} output = ${dto.serviceVarName}.${dto.scenarioMethod}(input);
         logService.info(getClass(), "ELK - Scenario: ${dto.scenarioMethod}; Input: %s; Output: %s;", input, output);
         eventService.publish(output, ${dto.publishDataType}.TOPIC);
      } catch(ServiceFaultException fault) {
         faultManagementService.handleFault(fault);
      }
   }
#else
   @Override
   public void eventReceived(IEvent<${dto.subscriberDataType}> event) {
      Preconditions.checkNotNull(event, "event may not be null!");
      ${dto.subscriberDataType} input = Preconditions.checkNotNull(event.getSource(), "event source may not be null!");
      try {
         Collection<${dto.publishDataType}> output = ${dto.serviceVarName}.${dto.scenarioMethod}(input);
         logService.info(getClass(), "ELK - Scenario: ${dto.scenarioMethod}; Input: %s; Output: %s;", input, output);
         output.forEach(o -> eventService.publish(o, ${dto.publishDataType}.TOPIC));
      } catch (ServiceFaultException fault) {
         faultManagementService.handleFault(fault);
      }
   }
#end

   @SuppressWarnings("unchecked")
   @Activate
   public void activate() {
      eventService.addSubscriber(this, ${dto.subscriberDataType}.TOPIC);
      logService.debug(getClass(), "Activated.");
   }

   @SuppressWarnings("unchecked")
   @Deactivate
   public void deactivate() {
      eventService.removeSubscriber(this, ${dto.subscriberDataType}.TOPIC);
      logService.debug(getClass(), "Deactivated.");
   }

   @Reference(cardinality = ReferenceCardinality.MANDATORY,
         policy = ReferencePolicy.STATIC,
         unbind = "${dto.unbinderSnippet}")
   public void ${dto.binderSnippet}(${dto.service.typeName} ref) {
      this.${dto.serviceVarName} = ref;
   }

   public void ${dto.unbinderSnippet}(${dto.service.typeName} ref) {
      ${dto.binderSnippet}(null);
   }

   @Reference(cardinality = ReferenceCardinality.MANDATORY,
         policy = ReferencePolicy.STATIC,
         unbind = "removeEventService")
   public void setEventService(IEventService ref) {
      this.eventService = ref;
   }

   public void removeEventService(IEventService ref) {
      setEventService(null);
   }

   @Reference(cardinality = ReferenceCardinality.MANDATORY,
         policy = ReferencePolicy.STATIC,
         unbind = "removeLogService")
   public void setLogService(ILogService ref) {
      this.logService = ref;
   }

   public void removeLogService(ILogService ref) {
      setLogService(null);
   }

   @Reference(cardinality = ReferenceCardinality.MANDATORY,
         policy = ReferencePolicy.STATIC,
         unbind = "removeFaultManagementService")
   public void setFaultManagementService(IFaultManagementService ref) {
      this.faultManagementService = ref;
   }

   public void removeFaultManagementService(IFaultManagementService ref) {
      setFaultManagementService(null);
   }
}
