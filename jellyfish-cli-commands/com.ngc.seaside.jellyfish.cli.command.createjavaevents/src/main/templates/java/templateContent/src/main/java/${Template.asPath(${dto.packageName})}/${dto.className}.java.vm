#*
 * UNCLASSIFIED
 *
 * Copyright 2020 Northrop Grumman Systems Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *#
package $dto.packageName;

public#if($dto.isAbstract()) abstract#end #if($dto.isEnum())enum#{else}class#end ${dto.className}#if($dto.extendedClass) extends $dto.extendedClass#end {

## Generate an enumeration
#if($dto.isEnum())
#set($size = $dto.data.values.size())
#foreach ($value in $dto.data.values)
#if($foreach.last)
	$value
#else
	$value,
#end
#end
## Generate the class
#else
##Topic and Name
   public static final String TOPIC_NAME = "/data/${dto.packageName}.${dto.className}";

   public static final com.ngc.blocs.service.event.api.IEventTopic<${dto.className}> TOPIC = 
      com.ngc.blocs.service.event.api.EventTopic.of(TOPIC_NAME, ${dto.className}.class);

#foreach ($field in $dto.data.fields)
   private ${dto.fieldType($field)} ${dto.fieldName($field)};
#end##field definitions

#foreach ($field in $dto.data.fields)
   public ${dto.fieldType($field)} ${dto.fieldGetter($field)}() {
      return ${dto.fieldName($field)};
   }

   public ${dto.className} ${dto.fieldSetter($field)}(${dto.fieldType($field)} ${dto.fieldName($field)}) {
      this.${dto.fieldName($field)} = ${dto.fieldName($field)};
      return this;
   }

#end
#set($size = ${dto.data.fields.size()})
   @Override
   public int hashCode() {
      return java.util.Objects.hash(
#if($dto.extendedClass)
      super.hashCode()#if(! $dto.data.fields.isEmpty()),#end
#end
#foreach ($field in $dto.data.fields)
         this.${dto.fieldName($field)}#if($foreach.hasNext),#end
#end
      );
   }

   @Override
   public boolean equals(Object obj) {
      if(obj == this) {
         return true;
      }

      if(!(obj instanceof ${dto.className})) {
         return false;
      }

#if(${dto.data.fields.isEmpty()})
      return #if($dto.extendedClass)super.equals(obj)#{else}true#end;
#else
      ${dto.className} that = (${dto.className}) obj;

      return #if($dto.extendedClass)super.equals(obj) &&#end
#foreach ($field in $dto.data.fields)
         java.util.Objects.equals(this.${dto.fieldName($field)}, that.${dto.fieldName($field)})#if($foreach.hasNext) &&#end
#end
      ;
#end
   }

   @Override
   public String toString() {
      StringBuilder builder = new StringBuilder();
#if($dto.extendedClass)
      builder.append(super.toString());
#else
	  builder.append(getClass().getSimpleName())#if(! $dto.data.fields.isEmpty()).append(" - ")#end;
#end
#foreach ($field in $dto.data.fields)
      builder.append("[${dto.fieldName($field)}=").append(${dto.fieldName($field)}).append("]");
#end
      return builder.toString();
   }
#end

}
