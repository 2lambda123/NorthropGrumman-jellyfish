${header.java}
package ${dto.packageName};

public class ${dto.model.name}DataConversion {

#foreach($value in ${dto.allInputs})
#if ($dto.isConverted($value))
#set ($eventPackage = $dto.eventPackage($value))
#set ($messagePackage = $dto.messagePackage($value))
   public static ${eventPackage}.${value.name} ${dto.messageToEventConvert($value, "${messagePackage}.${value.name} from")} {
#if (${IData.isInstance($value)})
#set ($data = $value)
      ${eventPackage}.${value.name} to = new ${eventPackage}.${value.name}();

#foreach ($field in $dto.getFields().apply($data))
#if ( $dto.isMultiple($field))
      to.${dto.eventSetter($field)}(new java.util.ArrayList<>(from.${dto.messageRepeatedCount($field)}()));
      for (${dto.messageType($field)} value : from.${dto.messageGetter($field)}()) {
         to.${dto.eventGetter($field)}().add(${dto.messageToEventConvert($field, "value")});
      }
#else
      to.${dto.eventSetter($field)}(${dto.messageToEventConvert($field, "from.${dto.messageGetter($field)}()")});
#end
#end
#else
#set ($enum = $value)
      final ${eventPackage}.${enum.name} to;

      switch (from) {
#foreach ( $enumValue in $enum.values)
      case $enumValue:
         to = ${eventPackage}.${enum.name}.$enumValue;
         break;
#end
      default:
         throw new IllegalArgumentException("Unknown enum: " + from);
      }
#end

      return to;
   }

#end
#end
#foreach($value in ${dto.allOutputs})
#if ($dto.isConverted($value))
#set ($eventPackage = $dto.eventPackage($value))
#set ($messagePackage = $dto.messagePackage($value))
   public static ${messagePackage}.${value.name} ${dto.eventToMessageConvert($value, "${eventPackage}.${value.name} from")} {
#if (${IData.isInstance($value)})
#set ($data = $value)
      ${messagePackage}.${value.name}.Builder to = ${messagePackage}.${value.name}.newBuilder();

#foreach ($field in $dto.getFields().apply($data))
#if ( $dto.isMultiple($field))
      for (${dto.eventType($field)} value : from.${dto.eventGetter($field)}()) {
         to.${dto.messageRepeatedAdder($field)}(${dto.eventToMessageConvert($field, "value")});
      }
#else
      to.${dto.messageSetter($field)}(${dto.eventToMessageConvert($field, "from.${dto.eventGetter($field)}()")});
#end
#end

      return to.build();
#else
#set ($enum = $value)
      final ${messagePackage}.${enum.name} to;

      switch (from) {
#foreach ( $enumValue in $enum.values)
      case $enumValue:
         to = ${messagePackage}.${enum.name}.$enumValue;
         break;
#end
      default:
         throw new IllegalArgumentException("Unknown enum: " + from);
      }

      return to;
#end
   }

#end
#end
}
