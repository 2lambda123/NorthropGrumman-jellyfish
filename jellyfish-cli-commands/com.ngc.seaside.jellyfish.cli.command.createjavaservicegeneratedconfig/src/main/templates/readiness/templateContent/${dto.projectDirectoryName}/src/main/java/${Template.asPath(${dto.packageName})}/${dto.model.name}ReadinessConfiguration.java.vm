#*
 * UNCLASSIFIED
 *
 * Copyright 2020 Northrop Grumman Systems Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *#
package ${dto.packageName};

#set ($dto.imports.package = $dto.packageName)
#set ($ignore = $dto.imports.add("com.ngc.blocs.service.event.api.IEventSubscriber"))
#set ($ignore = $dto.imports.add("com.ngc.blocs.service.log.api.ILogService"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.readiness.api.IReadinessConfiguration"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.readiness.api.IReadinessService"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.api.ITransportEventSource"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.Activate"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.Component"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.Deactivate"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.Reference"))
#foreach ($class in $dto.classes)
#set ($ignore = $dto.imports.add($class))
#end
${dto.imports.generateJava()}

@Component(service = ${dto.model.name}ReadinessConfiguration.class, immediate = true)
public class ${dto.model.name}ReadinessConfiguration {

   private ILogService logService;

   private IReadinessService readinessService;

   private ${dto.adviser.typeName} adviser;

   @Activate
   public void activate() {
      IReadinessConfiguration config = readinessService.newConfiguration();
      config.require()
            .persistentEventPublished(ITransportEventSource.CONFIGURATION_REFRESHED_TOPIC)
#foreach ( $class in $dto.classes )
            .require()
            .componentActivated(${dto.imports.getType($class)}.class)
#end
#foreach ( $subscriber in $dto.eventSubscribers )
            .require()
            .componentActivated(IEventSubscriber.class, "(component.name=${subscriber})")
#end
#foreach ( $component in $dto.components )
            .require()
            .componentActivated("(component.name=${component})")
#end
            ;

      readinessService.register(adviser.adviseReadinessConfiguration(config));

      logService.debug(getClass(), "Activated.");
   }

   @Deactivate
   public void deactivate() {
      logService.debug(getClass(), "Deactivated.");
   }

   @Reference
   public void setLogService(ILogService ref) {
      this.logService = ref;
   }

   public void removeLogService(ILogService ref) {
      setLogService(null);
   }

   @Reference
   public void setReadinessService(IReadinessService ref) {
      this.readinessService = ref;
   }

   public void removeReadinessService(IReadinessService ref) {
      setReadinessService(null);
   }

   @Reference
   public void setAdviser(${dto.adviser.typeName} ref) {
      this.adviser = ref;
   }

   public void removeAdviser(${dto.adviser.typeName} ref) {
      setAdviser(null);
   }
}
