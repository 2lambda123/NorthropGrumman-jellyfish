${header.java}
package ${dto.packageName};

#set ($dto.imports.package = $dto.packageName)
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.api.ITransportProvider"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.api.TransportConfiguration"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.api.TransportConfigurationException"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.impl.topic.multicast.MulticastTopic"))
#set ($ignore = $dto.imports.add("java.net.UnknownHostException"))
#foreach ($topic in $dto.topics)
#set ($ignore = $dto.variables.add($topic, $topic.variableName))
#foreach ($transportTopic in $topic.transportTopics)
#set ($ignore = $dto.imports.add($transportTopic.type))
#end
#end
${dto.imports.generateJava()}

public class ${dto.configurationClassName} {

   private ${dto.configurationClassName}() {
   }

   public static void configure(TransportConfiguration config, ITransportProvider<MulticastTopic> multicastProvider) {
      try {
#foreach ($topic in $dto.topics)
         MulticastTopic ${dto.variables.get($topic)} = new MulticastTopic("${topic.groupAddress}", ${topic.port}, "${topic.bindAddress}");

#end
#foreach ($entry in $dto.sendTopics.entrySet())
#set ($name = $entry.key)
#set ($topics = $entry.value)
#foreach ($topic in $topics)
#foreach ($transportTopic in $topic.transportTopics)
         config.whenSending()
               .toApplicationTopic(${dto.imports.getType($transportTopic.type)}.${transportTopic.value})
               .useTransportProvider(multicastProvider)
               .onPhysicalTopic(t -> ${dto.variables.get($topic)});
#end
#end               
#end

#foreach ($entry in $dto.receiveTopics.entrySet())
#set ($name = $entry.key)
#set ($topics = $entry.value)
#foreach ($topic in $topics)
#foreach ($transportTopic in $topic.transportTopics)
         config.whenReceiving()
               .withTransportProvider(multicastProvider)
               .onPhysicalTopic(${dto.variables.get($topic)})
               .useApplicationTopic(t -> ${dto.imports.getType($transportTopic.type)}.${transportTopic.value});
#end
#end
#end
      } catch (UnknownHostException e) {
         throw new TransportConfigurationException(e);
      }
   }
}
