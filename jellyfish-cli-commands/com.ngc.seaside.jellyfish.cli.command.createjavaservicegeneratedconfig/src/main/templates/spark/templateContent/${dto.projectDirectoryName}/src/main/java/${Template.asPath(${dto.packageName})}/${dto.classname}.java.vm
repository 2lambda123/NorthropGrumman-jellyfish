package ${dto.packageName};

#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.api.ITransportProvider"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.api.TransportConfiguration"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.impl.topic.spark.HttpVerb"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.impl.topic.spark.SparkTopic"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.impl.topic.spark.SparkTopics"))
#foreach ($import in $dto.imports)
import ${import};
#end

public class ${dto.classname} {

   private ${dto.classname}() {
   }

   public static void configure(TransportConfiguration config, ITransportProvider<SparkTopic> sparkProvider) {
#foreach ($topic in $dto.topics)
       SparkTopic ${topic.variableName} = SparkTopics.boundTo("${topic.networkInterface.name}", ${topic.port})
             .when(HttpVerb.${topic.httpMethod})
             .onPath("${topic.path}")
             .accept("${topic.contentType}")
             .respondWithType("${topic.contentType}")
             .reportRootCauseExceptionsOnly()
             .build();

#end
#foreach ($entry in $dto.topics)
       config.whenReceiving()
             .withTransportProvider(sparkProvider)
             .onPhysicalTopic(${entry.variableName})
             .enableResponses(true)
             .useApplicationTopic(t -> ${entry.name});

#end
   }
}
