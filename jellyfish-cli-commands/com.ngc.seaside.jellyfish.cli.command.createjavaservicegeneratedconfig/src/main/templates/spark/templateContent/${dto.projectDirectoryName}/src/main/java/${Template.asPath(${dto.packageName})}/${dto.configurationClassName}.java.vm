package ${dto.packageName};

#set ($dto.imports.package = $dto.packageName)
#foreach ($topic in $dto.topics)
#set ($ignore = $dto.variables.add($topic, $topic.variableName))
#foreach ($transportTopic in $topic.transportTopics)
#set ($ignore = $dto.imports.add($transportTopic.type))
#end
#end
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.api.ITransportProvider"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.api.TransportConfiguration"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.impl.topic.spark.HttpVerb"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.impl.topic.spark.SparkTopic"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.impl.topic.spark.SparkTopics"))
${dto.imports.generateJava()}

public class ${dto.configurationClassName} {

   private ${dto.configurationClassName}() {
   }

   public static void configure(TransportConfiguration config, ITransportProvider<SparkTopic> sparkProvider) {
#foreach ($topic in $dto.topics)
       SparkTopic ${dto.variables.get($topic)} = SparkTopics.boundTo("${topic.networkInterface}", ${topic.port})
             .when(HttpVerb.${topic.httpMethod})
             .onPath("${topic.path}")
             .accept("${topic.contentType}")
             .respondWithType("${topic.contentType}")
             .reportRootCauseExceptionsOnly()
             .build();

#end
#foreach ($topic in $dto.topics)
#foreach ($transportTopic in $topic.transportTopics)

       config.whenReceiving()
             .withTransportProvider(sparkProvider)
             .onPhysicalTopic(${dto.variables.get($topic)})
             .enableResponses(true)
             .useApplicationTopic(t -> ${dto.imports.getType($transportTopic.type)}.${transportTopic.value});
#end
#end
   }
}
