#*
 * UNCLASSIFIED
 *
 * Copyright 2020 Northrop Grumman Systems Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *#
package ${dto.packageName};

#set ($dto.imports.package = $dto.packageName)
#foreach ($topic in $dto.topics)
#set ($ignore = $dto.variables.add($topic, $topic.variableName))
#foreach ($transportTopic in $topic.transportTopics)
#set ($ignore = $dto.imports.add($transportTopic.type))
#end
#end
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.api.ITransportProvider"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.api.TransportConfiguration"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.impl.topic.spark.HttpVerb"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.impl.topic.spark.SparkTopic"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.impl.topic.spark.SparkTopics"))
${dto.imports.generateJava()}

public class ${dto.configurationClassName} {

   private ${dto.configurationClassName}() {
   }

   public static void configure(TransportConfiguration config, ITransportProvider<SparkTopic> sparkProvider) {
#foreach ($topic in $dto.topics)
       SparkTopic ${dto.variables.get($topic)} = SparkTopics.boundTo("${topic.networkInterface}", ${topic.port})
             .when(HttpVerb.${topic.httpMethod})
             .onPath("${topic.path}")
             .accept("${topic.contentType}")
             .respondWithType("${topic.contentType}")
             .reportRootCauseExceptionsOnly()
             .build();

#end
#foreach ($topic in $dto.topics)
#foreach ($transportTopic in $topic.transportTopics)

       config.whenReceiving()
             .withTransportProvider(sparkProvider)
             .onPhysicalTopic(${dto.variables.get($topic)})
             .enableResponses(true)
             .useApplicationTopic(t -> ${dto.imports.getType($transportTopic.type)}.${transportTopic.value});
#end
#end
   }
}
