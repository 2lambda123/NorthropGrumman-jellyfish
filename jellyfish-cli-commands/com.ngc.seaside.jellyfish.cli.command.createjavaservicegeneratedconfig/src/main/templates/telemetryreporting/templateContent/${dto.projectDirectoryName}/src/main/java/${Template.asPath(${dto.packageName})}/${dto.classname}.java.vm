package ${dto.packageName};

import com.ngc.blocs.service.log.api.ILogService;
import com.ngc.blocs.service.thread.api.ISubmittedTask;
import com.ngc.blocs.service.thread.api.IThreadService;
import com.ngc.blocs.time.api.Time;
import com.ngc.seaside.service.readiness.api.IReadinessService;
import com.ngc.seaside.service.readiness.api.Readiness;
import com.ngc.seaside.service.telemetry.api.ITelemetryService;
import com.ngc.seaside.service.transport.request.api.FutureSettingCallback;
import ${dto.topicsImport};

import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Deactivate;
import org.osgi.service.component.annotations.Reference;

import java.util.concurrent.ScheduledFuture;
import java.util.function.Function;

@Component(service = ${dto.classname}.class, immediate = true)
public class ${dto.classname} {

   private ILogService logService;
   private ITelemetryService telemetryService;
   private IThreadService threadService;
   private IReadinessService readinessService;
   private ISubmittedTask<Void, ScheduledFuture<Void>> task;

   @Activate
   public void activate() {
      logService.debug(getClass(), "activated");
      task = threadService.executePeriodically(getClass().getName(),
                                               this::sendTelemetry,
                                               Time.getCurrentTime(),
                                               ${dto.rateInMilliseconds});
   }

   @Deactivate
   public void deactivate() {
      task.getFuture().cancel(false);
      task = null;
      logService.debug(getClass(), "Deactivated");
   }

   @Reference
   public void setLogService(ILogService ref) {
      this.logService = ref;
   }

   public void removeLogService(ILogService ref) {
      setLogService(null);
   }

   @Reference
   public void setTelemetryService(ITelemetryService ref) {
      this.telemetryService = ref;
   }

   public void removeTelemetryService(ITelemetryService ref) {
      setTelemetryService(null);
   }

   @Reference
   public void setThreadService(IThreadService ref) {
      this.threadService = ref;
   }

   public void removeThreadService(IThreadService ref) {
      setThreadService(null);
   }

   @Reference
   public void setReadinessService(IReadinessService ref) {
      this.readinessService = ref;
   }

   public void removeReadinessService(IReadinessService ref) {
      setReadinessService(null);
   }

   private void sendTelemetry() {
      if (readinessService.getReadiness() == Readiness.READY) {
         telemetryService.publishTelemetry(${dto.topic}, new FutureSettingCallback<>(Function.identity()));
      }
   }
}
