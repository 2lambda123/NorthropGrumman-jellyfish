package ${dto.packageName};

#set ($dto.imports.package = $dto.packageName)
#set ($ignore = $dto.imports.add("com.ngc.blocs.service.log.api.ILogService"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.api.ITransportProvider"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.api.ITransportService"))
#set ($ignore = $dto.imports.add("com.ngc.seaside.service.transport.api.TransportConfiguration"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.Activate"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.Component"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.Deactivate"))
#set ($ignore = $dto.imports.add("org.osgi.service.component.annotations.Reference"))
#foreach ($transportProvider in $dto.transportProviders)
#set ($ignore = $dto.imports.add($transportProvider.topicType))
#set ($ignore = $dto.variables.add($transportProvider, $transportProvider.providerVariableName))
#end
${dto.imports.generateJava()}

@Component(immediate = true)
public class ${dto.className} {

   private ILogService logService;

   private ITransportService transportService;

#foreach ($transportProvider in $dto.transportProviders)
   private ITransportProvider<${dto.imports.getType($transportProvider.topicType)}> ${dto.variables.get($transportProvider)};

#end
   @Activate
   public void activate() {
      TransportConfiguration config = new TransportConfiguration();
#foreach ($transportProvider in $dto.transportProviders)
      ${dto.imports.getType($transportProvider.configurationType)}.configure(config, ${dto.variables.get($transportProvider)});
#end
      transportService.registerConfiguration(config);
      logService.debug(getClass(), "activated");
   }

   @Deactivate
   public void deactivate() {
      logService.debug(getClass(), "deactivated");
   }

   @Reference
   public void setLogService(ILogService ref) {
      this.logService = ref;
   }

   public void removeLogService(ILogService ref) {
      setLogService(null);
   }

   @Reference
   public void setTransportService(ITransportService ref) {
      this.transportService = ref;
   }

   public void removeTransportService(ITransportService ref) {
      setTransportService(null);
   }
#foreach ($transportProvider in $dto.transportProviders)
#set ($methodName = ${StringUtils.capitalize($dto.variables.get($transportProvider))})

   @Reference(
         target = "${transportProvider.providerTarget}")
   public void set${methodName}(ITransportProvider<${dto.imports.getType($transportProvider.topicType)}> ref) {
      this.${dto.variables.get($transportProvider)} = ref;
   }

   public void remove${methodName}(ITransportProvider<${dto.imports.getType($transportProvider.topicType)}> ref) {
      set${methodName}(null);
   }
#end
}
