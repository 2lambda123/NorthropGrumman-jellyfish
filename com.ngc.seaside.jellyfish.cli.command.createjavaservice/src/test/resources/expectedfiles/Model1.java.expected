package com.ngc.seaside.test1.model1;

import com.ngc.blocs.service.api.IServiceModule;
import com.ngc.blocs.service.event.api.IEventService;
import com.ngc.blocs.service.log.api.ILogService;
import com.ngc.seaside.service.fault.api.IFaultManagementService;
import com.ngc.seaside.service.fault.api.ServiceFaultException;
import com.ngc.seaside.service.fault.api.ServiceInputFaultException;
import com.ngc.seaside.test1.model1.api.IModel1;
import com.ngc.seaside.test1.model1.base.impl.AbstractModel1;
import com.ngc.seaside.test1.model1.events.Data1;
import com.ngc.seaside.test1.model1.events.Data3;
import com.ngc.seaside.test1.model1.events.Data5Data;
import com.ngc.seaside.test1.model1.events.Data2;
import com.ngc.seaside.test1.model1.events.Data4;

import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Deactivate;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.component.annotations.ReferenceCardinality;
import org.osgi.service.component.annotations.ReferencePolicy;


@Component(service = {IModel1.class, IServiceModule.class}, immediate = true)
public class Model1 extends AbstractModel1 {

    @Override
    public Data2 scenarioBehavior (Data1 data1) throws ServiceFaultException {
         // TODO Auto-generated method stub
         throw new UnsupportedOperationException();
    }


   @Activate
   public void activate() {
      super.activate();
   }

   @Deactivate
   public void deactivate() {
      super.deactivate();
   }

   @Override
   @Reference(cardinality = ReferenceCardinality.MANDATORY, policy = ReferencePolicy.STATIC)
   public void setLogService(ILogService ref) {
      super.setLogService(ref);
   }

   @Override
   public void removeLogService(ILogService ref) {
      super.removeLogService(ref);
   }

   @Override
   @Reference(cardinality = ReferenceCardinality.MANDATORY, policy = ReferencePolicy.STATIC)
   public void setEventService(IEventService ref) {
      super.setEventService(ref);
   }

   @Override
   public void removeEventService(IEventService ref) {
      super.removeEventService(ref);
   }

   @Override
   @Reference(cardinality = ReferenceCardinality.MANDATORY, policy = ReferencePolicy.STATIC)
   public void setFaultManagementService(IFaultManagementService ref) {
      super.setFaultManagementService(ref);
   }

   @Override
   @Reference(cardinality = ReferenceCardinality.MANDATORY, policy = ReferencePolicy.STATIC)
   public void removeFaultManagementService(IFaultManagementService ref) {
      super.removeFaultManagementService(ref);
   }
}
