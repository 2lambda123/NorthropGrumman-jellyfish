package ${package};

import com.ngc.blocs.service.api.IServiceModule;
import com.ngc.blocs.service.event.api.IEventService;
import com.ngc.blocs.service.log.api.ILogService;
import com.ngc.seaside.service.fault.api.IFaultManagementService;
import com.ngc.seaside.service.fault.api.ServiceFaultException;
import com.ngc.seaside.service.fault.api.ServiceInputFaultException;
import ${groupId}.${artifactId}.api.I${modelObject.getName()};
import ${groupId}.${artifactId}.base.impl.Abstract${modelObject.getName()};
#foreach($field in $modelObject.getInputs())
import ${package}.events.${field.getType().getName()};
#end
#foreach($field in $modelObject.getOutputs())
import ${package}.events.${field.getType().getName()};
#end

import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Deactivate;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.component.annotations.ReferenceCardinality;
import org.osgi.service.component.annotations.ReferencePolicy;

public class ${modelObject.getName()}GuiceWrapper extends Abstract${modelObject.getName()}{
##start processing each scenario
#set ( $modelMethodList = [])
#set ( $modelScenarioList = [])
#foreach ( $iScenario in ${modelObject.getScenarios()} )
#set ($dontCare = $modelScenarioList.add($iScenario))
#set ( $modelReceiveList = [] )
##start processing each when
#foreach ( $iScenarioStep in $iScenario.getWhens() )
#if ( $iScenarioStep.getKeyword() == "receiving" )
#foreach ( $param in $iScenarioStep.getParameters() )
#set ($dontCare = $modelReceiveList.add($param))
#end
#end
#end
##end processing each when
##start processing each then
#foreach ( $iScenarioStep in $iScenario.getThens() )
#if ( $iScenarioStep.getKeyword() == "willPublish" )
#set ( $output = $iScenarioStep.getParameters().get(0))
#end
#end
##end processing then
#if (! $modelReceiveList.isEmpty() )
#set ($outputType = $modelObject.getOutputs().getByName($output).get().getType().getName())
#set ($modelReceiveTypeList = [])
#foreach ($input in $modelReceiveList)
#set ($dontCare = $modelReceiveTypeList.add($modelObject.getInputs().getByName($input).get().getType().getName()))
#end
#set ($dontCare = $modelMethodList.add("$outputType $iScenario.getName() (#foreach ($input in $modelReceiveList)#set ($index = $modelReceiveList.indexOf($input))$modelReceiveTypeList.get($index) $input#if( $velocityHasNext ),#end#end) throws ServiceFaultException"))
#end
#end
##end processing scenarios

   private final ${modelObject.getName()} delegate = new ${modelObject.getName()}();

   @Inject
   public ${modelObject.getName()}GuiceWrapper(ILogService logService,IEventService eventService,IFaultManagementService faultManagementService){
      delegate.setLogService(logService);
      delegate.setEventService(eventService);
      delegate.setFaultManagementService(faultManagementService);
      delegate.activate();
   }

#foreach ($method in $modelMethodList)
   @Override
   public $method {
      delegate.$modelScenarioList.get($modelMethodList.indexOf($method)).getName()(#foreach ($input in $modelReceiveList)$input#if( $velocityHasNext ), #end#end);
   }

#end
}

