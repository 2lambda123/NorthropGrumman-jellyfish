/*
 * UNCLASSIFIED
 * Northrop Grumman Proprietary
 * ____________________________
 *
 * Copyright (C) 2018, Northrop Grumman Systems Corporation
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Northrop Grumman Systems Corporation. The intellectual and technical concepts
 * contained herein are proprietary to Northrop Grumman Systems Corporation and
 * may be covered by U.S. and Foreign Patents or patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Northrop Grumman.
 */
buildscript {
   ext {
      versionsFile = file('../versions.gradle')
   }
   apply from: versionsFile, to: project

   repositories {
      mavenLocal()

      maven {
         url nexusConsolidated
      }
   }

   dependencies {
      classpath "com.ngc.seaside:gradle.plugins:$seasidePluginsVersion"
      classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqubePluginVersion"
      classpath "com.ngc.seaside:jellyfish.service.buildmgmt.impl.buildmgmtservice:$version"
   }
}

apply plugin: 'com.ngc.seaside.repository'
apply plugin: 'com.ngc.seaside.ci'
apply plugin: 'com.ngc.seaside.root.parent'

configurations {
   extra
}

import com.ngc.seaside.jellyfish.service.buildmgmt.impl.buildmgmtservice.DefaultDependenciesConfiguration

ext {
   starfishVersion = DefaultDependenciesConfiguration
                           .config
                           .groups
                           .find { it.versionPropertyName == 'starfishVersion' }
                           .version
}

// These are extra dependencies we need.
dependencies {
   // Required at runtime for OSGi.
   extra "log4j:log4j-osgi:$log4jVersion"
   // Required by the protobuf plugin when building on Linux.  Does not show up as a dependency until actually running
   // the protobuf plugin.
   extra "com.google.protobuf:protoc:$protobufVersion:linux-x86_64@exe"
   // Required for Windows.  Note that if a maven local repo has only the linux version of
   // protoc this will fail because Gradle will only examine the maven local repo and no remote repos.
   // If the windows classifier is not their Gradle generates a dependency not found error.
   extra "com.google.protobuf:protoc:$protobufVersion:windows-x86_64@exe"
   // Required by SD projects themselves.
   extra "com.ngc.seaside:systemdescriptor.lang:$version@zip"
   extra "com.ngc.seaside:systemdescriptor.lang:$version:tests@zip"
   // Needed by the license plugin for Gradle.
   extra 'com.mycila:license-maven-plugin:3.0'
   extra 'com.mycila.xmltool:xmltool:3.3'
   // Needed for the Jellyfish Sonarqube plugin.
   extra "org.sonarsource.sonarqube:sonar-plugin-api:$sonarqubeVersion"
   // Missing because it isn't captured by the two jellyfish examples audits
   extra "com.ngc.seaside:service.transport.impl.provider.spark.module:$starfishVersion"
}

seasideCi {
   forceResolutionOf('extra')

   m2OutputDirectory = m2directory
   dependencyInfoReportFile = dependenciesReportFile
   deploymentScriptFile = m2DeploymentScriptFile
}

// This appears to be a bug in the Seaside repository plugin or Gradle.  We get an NPE from this line
// org.gradle.internal.resource.transport.http.ntlm.NTLMCredentials.<init>(NTLMCredentials.java:35)
// if we don't set *some* username and password on Nexus Consoldiated.  However, we *don't actually need this* so I
// don't know why we have to specifiy it.  Anyway, as long as its not null, anything works.
afterEvaluate {
   repositories.getByName('NexusConsolidated') {
      credentials {
         username "foo"
         password "bar"
      }
   }
}
