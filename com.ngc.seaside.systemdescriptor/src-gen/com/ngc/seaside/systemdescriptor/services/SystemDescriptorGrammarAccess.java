/*
 * generated by Xtext 2.10.0
 */
package com.ngc.seaside.systemdescriptor.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SystemDescriptorGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DescriptorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ngc.seaside.systemdescriptor.SystemDescriptor.Descriptor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackagePackageParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//Descriptor:
		//	package=Package
		//	//imports+=Import*;
		//	elements+=Element+;
		@Override public ParserRule getRule() { return rule; }
		
		//package=Package //imports+=Import*;
		//elements+=Element+
		public Group getGroup() { return cGroup; }
		
		//package=Package
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }
		
		//Package
		public RuleCall getPackagePackageParserRuleCall_0_0() { return cPackagePackageParserRuleCall_0_0; }
		
		////imports+=Import*;
		//elements+=Element+
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_1_0() { return cElementsElementParserRuleCall_1_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ngc.seaside.systemdescriptor.SystemDescriptor.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//// -------------------------------	
		//// ---- Identifiers and names ----
		//// -------------------------------
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ngc.seaside.systemdescriptor.SystemDescriptor.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class UnqualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ngc.seaside.systemdescriptor.SystemDescriptor.UnqualifiedName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnqualifiedName:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ngc.seaside.systemdescriptor.SystemDescriptor.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cImportedNamespaceElementCrossReference_1_0 = (CrossReference)cImportedNamespaceAssignment_1.eContents().get(0);
		private final RuleCall cImportedNamespaceElementQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cImportedNamespaceElementCrossReference_1_0.eContents().get(1);
		
		//// ---------------------------
		//// ---- Package structure ----
		//// ---------------------------
		//Import:
		//	'import' importedNamespace=[Element|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=[Element|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=[Element|QualifiedName]
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//[Element|QualifiedName]
		public CrossReference getImportedNamespaceElementCrossReference_1_0() { return cImportedNamespaceElementCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getImportedNamespaceElementQualifiedNameParserRuleCall_1_0_1() { return cImportedNamespaceElementQualifiedNameParserRuleCall_1_0_1; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ngc.seaside.systemdescriptor.SystemDescriptor.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Package:
		//	'package' name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}
	public class DataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ngc.seaside.systemdescriptor.SystemDescriptor.Data");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUnqualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// ------------------------------
		//// ---- Basic model elements ----
		//// ------------------------------
		//Data:
		//	'data' name=UnqualifiedName '{'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'data' name=UnqualifiedName '{' '}'
		public Group getGroup() { return cGroup; }
		
		//'data'
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }
		
		//name=UnqualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//UnqualifiedName
		public RuleCall getNameUnqualifiedNameParserRuleCall_1_0() { return cNameUnqualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ngc.seaside.systemdescriptor.SystemDescriptor.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameUnqualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Model:
		//	'model' name=UnqualifiedName '{'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'model' name=UnqualifiedName '{' '}'
		public Group getGroup() { return cGroup; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//name=UnqualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//UnqualifiedName
		public RuleCall getNameUnqualifiedNameParserRuleCall_1_0() { return cNameUnqualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ngc.seaside.systemdescriptor.SystemDescriptor.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//	Data
		//	| Model;
		@Override public ParserRule getRule() { return rule; }
		
		//Data | Model
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Data
		public RuleCall getDataParserRuleCall_0() { return cDataParserRuleCall_0; }
		
		//Model
		public RuleCall getModelParserRuleCall_1() { return cModelParserRuleCall_1; }
	}
	public class MetadataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ngc.seaside.systemdescriptor.SystemDescriptor.Metadata");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeMetadataKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cJsonAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJsonObjectParserRuleCall_1_0 = (RuleCall)cJsonAssignment_1.eContents().get(0);
		
		//Metadata:
		//	type='metadata' json=Object?;
		@Override public ParserRule getRule() { return rule; }
		
		//type='metadata' json=Object?
		public Group getGroup() { return cGroup; }
		
		//type='metadata'
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//'metadata'
		public Keyword getTypeMetadataKeyword_0_0() { return cTypeMetadataKeyword_0_0; }
		
		//json=Object?
		public Assignment getJsonAssignment_1() { return cJsonAssignment_1; }
		
		//Object
		public RuleCall getJsonObjectParserRuleCall_1_0() { return cJsonObjectParserRuleCall_1_0; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ngc.seaside.systemdescriptor.SystemDescriptor.Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstObjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstObjectTerminalObjectParserRuleCall_1_0 = (RuleCall)cFirstObjectAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cObjectsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cObjectsTerminalObjectParserRuleCall_2_1_0 = (RuleCall)cObjectsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// ----------------------
		//// ---- JSON support ----
		//// ----------------------
		//Object:
		//	'{'
		//	firstObject=TerminalObject (',' objects+=TerminalObject)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' firstObject=TerminalObject (',' objects+=TerminalObject)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//firstObject=TerminalObject
		public Assignment getFirstObjectAssignment_1() { return cFirstObjectAssignment_1; }
		
		//TerminalObject
		public RuleCall getFirstObjectTerminalObjectParserRuleCall_1_0() { return cFirstObjectTerminalObjectParserRuleCall_1_0; }
		
		//(',' objects+=TerminalObject)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//objects+=TerminalObject
		public Assignment getObjectsAssignment_2_1() { return cObjectsAssignment_2_1; }
		
		//TerminalObject
		public RuleCall getObjectsTerminalObjectParserRuleCall_2_1_0() { return cObjectsTerminalObjectParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ngc.seaside.systemdescriptor.SystemDescriptor.Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstItemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstItemObjectValueParserRuleCall_1_0 = (RuleCall)cFirstItemAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cItemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cItemsObjectValueParserRuleCall_2_1_0 = (RuleCall)cItemsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Array:
		//	'[' firstItem=ObjectValue (',' items+=ObjectValue)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' firstItem=ObjectValue (',' items+=ObjectValue)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//firstItem=ObjectValue
		public Assignment getFirstItemAssignment_1() { return cFirstItemAssignment_1; }
		
		//ObjectValue
		public RuleCall getFirstItemObjectValueParserRuleCall_1_0() { return cFirstItemObjectValueParserRuleCall_1_0; }
		
		//(',' items+=ObjectValue)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//items+=ObjectValue
		public Assignment getItemsAssignment_2_1() { return cItemsAssignment_2_1; }
		
		//ObjectValue
		public RuleCall getItemsObjectValueParserRuleCall_2_1_0() { return cItemsObjectValueParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class EmptyObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ngc.seaside.systemdescriptor.SystemDescriptor.EmptyObject");
		private final Assignment cIsEmptyAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIsEmptyLeftCurlyBracketRightCurlyBracketKeyword_0 = (Keyword)cIsEmptyAssignment.eContents().get(0);
		
		//EmptyObject:
		//	isEmpty?='{}';
		@Override public ParserRule getRule() { return rule; }
		
		//isEmpty?='{}'
		public Assignment getIsEmptyAssignment() { return cIsEmptyAssignment; }
		
		//'{}'
		public Keyword getIsEmptyLeftCurlyBracketRightCurlyBracketKeyword_0() { return cIsEmptyLeftCurlyBracketRightCurlyBracketKeyword_0; }
	}
	public class EmptyArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ngc.seaside.systemdescriptor.SystemDescriptor.EmptyArray");
		private final Assignment cIsEmptyAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIsEmptyLeftSquareBracketRightSquareBracketKeyword_0 = (Keyword)cIsEmptyAssignment.eContents().get(0);
		
		//EmptyArray:
		//	isEmpty?='[]';
		@Override public ParserRule getRule() { return rule; }
		
		//isEmpty?='[]'
		public Assignment getIsEmptyAssignment() { return cIsEmptyAssignment; }
		
		//'[]'
		public Keyword getIsEmptyLeftSquareBracketRightSquareBracketKeyword_0() { return cIsEmptyLeftSquareBracketRightSquareBracketKeyword_0; }
	}
	public class ObjectValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ngc.seaside.systemdescriptor.SystemDescriptor.ObjectValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final RuleCall cObjectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrayParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEmptyObjectParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEmptyArrayParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ObjectValue:
		//	value=STRING | Object | Array | EmptyObject | EmptyArray;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING | Object | Array | EmptyObject | EmptyArray
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=STRING
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_0() { return cValueSTRINGTerminalRuleCall_0_0; }
		
		//Object
		public RuleCall getObjectParserRuleCall_1() { return cObjectParserRuleCall_1; }
		
		//Array
		public RuleCall getArrayParserRuleCall_2() { return cArrayParserRuleCall_2; }
		
		//EmptyObject
		public RuleCall getEmptyObjectParserRuleCall_3() { return cEmptyObjectParserRuleCall_3; }
		
		//EmptyArray
		public RuleCall getEmptyArrayParserRuleCall_4() { return cEmptyArrayParserRuleCall_4; }
	}
	public class TerminalObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ngc.seaside.systemdescriptor.SystemDescriptor.TerminalObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementSTRINGTerminalRuleCall_0_0 = (RuleCall)cElementAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentObjectValueParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		
		//TerminalObject:
		//	element=STRING ':' content=ObjectValue;
		@Override public ParserRule getRule() { return rule; }
		
		//element=STRING ':' content=ObjectValue
		public Group getGroup() { return cGroup; }
		
		//element=STRING
		public Assignment getElementAssignment_0() { return cElementAssignment_0; }
		
		//STRING
		public RuleCall getElementSTRINGTerminalRuleCall_0_0() { return cElementSTRINGTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//content=ObjectValue
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//ObjectValue
		public RuleCall getContentObjectValueParserRuleCall_2_0() { return cContentObjectValueParserRuleCall_2_0; }
	}
	
	
	private final DescriptorElements pDescriptor;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final UnqualifiedNameElements pUnqualifiedName;
	private final ImportElements pImport;
	private final PackageElements pPackage;
	private final DataElements pData;
	private final ModelElements pModel;
	private final ElementElements pElement;
	private final MetadataElements pMetadata;
	private final ObjectElements pObject;
	private final ArrayElements pArray;
	private final EmptyObjectElements pEmptyObject;
	private final EmptyArrayElements pEmptyArray;
	private final ObjectValueElements pObjectValue;
	private final TerminalObjectElements pTerminalObject;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SystemDescriptorGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDescriptor = new DescriptorElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pUnqualifiedName = new UnqualifiedNameElements();
		this.pImport = new ImportElements();
		this.pPackage = new PackageElements();
		this.pData = new DataElements();
		this.pModel = new ModelElements();
		this.pElement = new ElementElements();
		this.pMetadata = new MetadataElements();
		this.pObject = new ObjectElements();
		this.pArray = new ArrayElements();
		this.pEmptyObject = new EmptyObjectElements();
		this.pEmptyArray = new EmptyArrayElements();
		this.pObjectValue = new ObjectValueElements();
		this.pTerminalObject = new TerminalObjectElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.ngc.seaside.systemdescriptor.SystemDescriptor".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Descriptor:
	//	package=Package
	//	//imports+=Import*;
	//	elements+=Element+;
	public DescriptorElements getDescriptorAccess() {
		return pDescriptor;
	}
	
	public ParserRule getDescriptorRule() {
		return getDescriptorAccess().getRule();
	}
	
	//// -------------------------------	
	//// ---- Identifiers and names ----
	//// -------------------------------
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//UnqualifiedName:
	//	ID;
	public UnqualifiedNameElements getUnqualifiedNameAccess() {
		return pUnqualifiedName;
	}
	
	public ParserRule getUnqualifiedNameRule() {
		return getUnqualifiedNameAccess().getRule();
	}
	
	//// ---------------------------
	//// ---- Package structure ----
	//// ---------------------------
	//Import:
	//	'import' importedNamespace=[Element|QualifiedName];
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Package:
	//	'package' name=QualifiedName;
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//// ------------------------------
	//// ---- Basic model elements ----
	//// ------------------------------
	//Data:
	//	'data' name=UnqualifiedName '{'
	//	'}';
	public DataElements getDataAccess() {
		return pData;
	}
	
	public ParserRule getDataRule() {
		return getDataAccess().getRule();
	}
	
	//Model:
	//	'model' name=UnqualifiedName '{'
	//	'}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Element:
	//	Data
	//	| Model;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Metadata:
	//	type='metadata' json=Object?;
	public MetadataElements getMetadataAccess() {
		return pMetadata;
	}
	
	public ParserRule getMetadataRule() {
		return getMetadataAccess().getRule();
	}
	
	//// ----------------------
	//// ---- JSON support ----
	//// ----------------------
	//Object:
	//	'{'
	//	firstObject=TerminalObject (',' objects+=TerminalObject)* '}';
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//Array:
	//	'[' firstItem=ObjectValue (',' items+=ObjectValue)* ']';
	public ArrayElements getArrayAccess() {
		return pArray;
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}
	
	//EmptyObject:
	//	isEmpty?='{}';
	public EmptyObjectElements getEmptyObjectAccess() {
		return pEmptyObject;
	}
	
	public ParserRule getEmptyObjectRule() {
		return getEmptyObjectAccess().getRule();
	}
	
	//EmptyArray:
	//	isEmpty?='[]';
	public EmptyArrayElements getEmptyArrayAccess() {
		return pEmptyArray;
	}
	
	public ParserRule getEmptyArrayRule() {
		return getEmptyArrayAccess().getRule();
	}
	
	//ObjectValue:
	//	value=STRING | Object | Array | EmptyObject | EmptyArray;
	public ObjectValueElements getObjectValueAccess() {
		return pObjectValue;
	}
	
	public ParserRule getObjectValueRule() {
		return getObjectValueAccess().getRule();
	}
	
	//TerminalObject:
	//	element=STRING ':' content=ObjectValue;
	public TerminalObjectElements getTerminalObjectAccess() {
		return pTerminalObject;
	}
	
	public ParserRule getTerminalObjectRule() {
		return getTerminalObjectAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
