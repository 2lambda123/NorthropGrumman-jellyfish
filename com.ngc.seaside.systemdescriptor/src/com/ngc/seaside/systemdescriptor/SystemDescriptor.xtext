grammar com.ngc.seaside.systemdescriptor.SystemDescriptor with org.eclipse.xtext.common.Terminals

generate systemDescriptor "http://www.ngc.com/seaside/systemdescriptor/SystemDescriptor"

/*
 * Package is the root type and it contains imports and at most one declaration of
 * an element.
 */
Package
	: 'package' name=QualifiedName
	  imports+=Import*
	  element=Element
	;

// -------------------------------	
// ---- Identifiers and names ----
// -------------------------------

/*
 * A qualified name is a '.' delimited set of IDs.
 */
QualifiedName
	: ID ('.' ID)*
	;

/*
 * A qualified name with a wildcard is normal Java like import with
 * some.name.*
 */
QualifiedNameWithWildcard
	: QualifiedName '.*'?
	;

/*
 * An unqualified name is just an identifier without any '.' delimiters.
 */	
UnqualifiedName
	: ID
	;

// ---------------------------
// ---- Package structure ----
// ---------------------------

Import
	: 'import' importedNamespace=[Element|QualifiedName]	;


// ------------------------------
// ---- Data related objects ----
// ------------------------------

enum DataType
	: INT='int' | FLOAT='float'
	;
	
DataFieldDeclaration
	: type=DataType
	  name=UnqualifiedName
	  metadata=JsonObject?
	;

// ------------------------------
// ---- Basic model elements ----
// ------------------------------

Data
	: 'data' name=UnqualifiedName '{'
		metadata=Metadata?
		fields+=DataFieldDeclaration*
	  '}'
	;

Model
	: 'model' name=UnqualifiedName '{'
		metadata=Metadata?
	  '}'
	;

Element
	: Data
	| Model
	;








Metadata:
  type='metadata' json=JsonObject?
;	
	
	
// ----------------------
// ---- JSON support ----
// ----------------------
JsonObject:
	'{'
	firstObject=TerminalObject (',' objects+=TerminalObject)* '}';

Array:
	'[' firstItem=ObjectValue (',' items+=ObjectValue)* ']';

EmptyObject:
	isEmpty?='{}';

EmptyArray:
	isEmpty?='[]';

ObjectValue:
	value=STRING | JsonObject | Array | EmptyObject | EmptyArray;

TerminalObject:
    element=STRING ':' (content=ObjectValue);
