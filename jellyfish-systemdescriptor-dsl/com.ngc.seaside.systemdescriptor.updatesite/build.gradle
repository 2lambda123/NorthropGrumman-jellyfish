import com.ngc.seaside.gradle.util.EclipsePlugins
import com.ngc.seaside.gradle.util.Versions

ext {
   buildDir = 'build'
}

repositories {
  flatDir {
    // Use the directory that contains the Eclipse plugins as a repository.
    dirs "$eclipsePluginsDirectory"
  }
}

configurations {
   // Add feature files to this configuration.
   features
   
   // note that plugins is reserved
   
   // Add gradle built custom JellyFish bundles to this configuration.
   sdPlugins {
      transitive = false
   }
   
   // Add Eclipse plugins to this configuration.
   eclipsePlugins {
      transitive = false
   }
}

dependencies {
   features project(path: ':systemdescriptor.feature', configuration: 'feature')
   
   sdPlugins project(':systemdescriptor')
   sdPlugins project(':systemdescriptor.ide')
   sdPlugins project(':systemdescriptor.ui')
   
   eclipsePlugins name: 'org.antlr.runtime_3.2.0.v201101311130'
   eclipsePlugins name: 'org.apache.commons.logging_1.1.1.v201101211721'
   eclipsePlugins name: 'org.eclipse.emf.codegen_2.12.0.v20170609-0928'
   eclipsePlugins name: 'org.eclipse.emf.common_2.13.0.v20170609-0707'
   eclipsePlugins name: 'org.eclipse.emf.mwe.utils_1.3.21.201705291011'
   eclipsePlugins name: 'org.eclipse.emf.mwe2.language.ui_2.9.1.201705291011'
   eclipsePlugins name: 'org.eclipse.emf.mwe2.language_2.9.1.201705291011'
   eclipsePlugins name: 'org.eclipse.emf.mwe2.launch_2.9.1.201705291011'
   eclipsePlugins name: 'org.eclipse.emf.mwe2.lib_2.9.1.201705291011'
   eclipsePlugins name: 'org.eclipse.emf.mwe2.runtime_2.9.1.201705291011'
   eclipsePlugins name: 'org.eclipse.xtend.lib_2.12.0.v20170518-0757'
   eclipsePlugins name: 'org.eclipse.xtext.builder_2.12.0.v20170519-0809'
   eclipsePlugins name: 'org.eclipse.xtext.common.types.ui_2.12.0.v20170519-0809'
   eclipsePlugins name: 'org.eclipse.xtext.common.types_2.12.0.v20170519-0752'
   eclipsePlugins name: 'org.eclipse.xtext.ecore_2.12.0.v20170519-0752'
   eclipsePlugins name: 'org.eclipse.xtext.generator_2.12.0.v20170519-0752'
   eclipsePlugins name: 'org.eclipse.xtext.ide_2.12.0.v20170518-0959'
   eclipsePlugins name: 'org.eclipse.xtext.ui.codetemplates.ui_2.12.0.v20170519-0809'
   eclipsePlugins name: 'org.eclipse.xtext.ui.codetemplates_2.12.0.v20170519-0809'
   eclipsePlugins name: 'org.eclipse.xtext.ui.ecore_2.12.0.v20170519-0809'
   eclipsePlugins name: 'org.eclipse.xtext.ui.shared_2.12.0.v20170519-0809'
   eclipsePlugins name: 'org.eclipse.xtext.ui_2.12.0.v20170519-0809'
   eclipsePlugins name: 'org.eclipse.xtext.util_2.12.0.v20170518-0959'
   eclipsePlugins name: 'org.eclipse.xtext.xbase.lib_2.12.0.v20170518-0757'
   eclipsePlugins name: 'org.eclipse.xtext.xbase.ui_2.12.0.v20170519-0809'
   eclipsePlugins name: 'org.eclipse.xtext.xbase_2.12.0.v20170519-0752'
   eclipsePlugins name: 'org.eclipse.xtext.xtext.ui_2.12.0.v20170519-0809'
   eclipsePlugins name: 'org.eclipse.xtext_2.12.0.v20170518-0959'
   eclipsePlugins name: 'org.objectweb.asm_5.0.1.v201404251740'
}

task clean() {
   doLast {
      delete("$buildDir")
   }
}

task copyFeatures(type: Copy) {
   from configurations.features
   into { "$buildDir/updatesite/features" }

   // We have to rename the feature JARs built with Gradle to make the naming
   // convention expected by Eclipse or the feature won't install correctly.
   rename { String name ->
      EclipsePlugins.makeEclipseCompliantJarFileName(name)
   }
}

task copySdPlugins(type: Copy) {
   from configurations.sdPlugins {
      rename { String name ->
         // We have to rename the feature JARs built with Gradle to make the naming
         // convention expected by Eclipse or the feature won't install correctly.
         // For these dependencies, we need to prefix the group ID to the filename.
         def artifacts = configurations.sdPlugins.resolvedConfiguration.resolvedArtifacts
         def artifact = artifacts.find { it.file.name == name }
         def osgiVersion = Versions.makeOsgiCompliantVersion("${artifact.moduleVersion.id.version}")
         "${artifact.moduleVersion.id.group}.${artifact.name}_${osgiVersion}.${artifact.extension}"
      }
   }
   into { "$buildDir/updatesite/plugins" }
}

task copyEclipsePlugins(type: Copy) {
   from configurations.eclipsePlugins
   into { "$buildDir/updatesite/plugins" }
}

task createMetadata(dependsOn: [copyFeatures, copySdPlugins, copyEclipsePlugins]) {
   // Run eclipse.exe to build the update site metadata (the content.jar and artifacts.jar)
   // files.  Note that the arguments -metadataRepository and -artifactRepository want
   // "file URLs" but -source wants a plain old absolute path.
   doLast {
	   project.exec {
	      commandLine(
	         "$eclipseExe",
	         '-nosplash',
	         '-application', 'org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher',
	         '-compress',
	         '-metadataRepository', file("$buildDir/updatesite/").toURI().toURL(),
	         '-artifactRepository', file("$buildDir/updatesite/").toURI().toURL(),
	         '-source', new File("$buildDir", "updatesite")
	      )
	   }
   }
}

task createZip(type: Zip, dependsOn: createMetadata) {
   from "$buildDir/updatesite"
   destinationDir = file("$buildDir")
   archiveName = "com.ngc.seaside.systemdescriptor.updatesite-${project.version}.zip"
}

task createTarGz(type: Tar, dependsOn: createMetadata) {
   from "$buildDir/updatesite"
   compression = Compression.GZIP
   destinationDir = file("$buildDir")
   archiveName = "com.ngc.seaside.systemdescriptor.updatesite-${project.version}.tar.gz"
}

task build(dependsOn: [createZip, createTarGz]) {
}

defaultTasks = ['build']
