/*
 * UNCLASSIFIED
 * Northrop Grumman Proprietary
 * ____________________________
 *
 * Copyright (C) 2018, Northrop Grumman Systems Corporation
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Northrop Grumman Systems Corporation. The intellectual and technical concepts
 * contained herein are proprietary to Northrop Grumman Systems Corporation and
 * may be covered by U.S. and Foreign Patents or patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Northrop Grumman.
 */
import org.gradle.internal.os.OperatingSystem
import com.ngc.seaside.gradle.util.Versions

// This prevents errors due to how the org.xtext.xtend
// autoguesses the version of Xtend to use.  It guess
// wrong and fails the build.  See the code at
// https://github.com/xtext/xtext-gradle-plugin/blob/master/xtext-gradle-plugin/src/main/java/org/xtext/gradle/XtendLanguageBasePlugin.xtend
// and https://github.com/xtext/xtext-gradle-plugin/blob/master/xtext-gradle-plugin/src/main/java/org/xtext/gradle/tasks/XtextExtension.xtend
// Note this really controls the version of Xtend, not
// just Xtext.
xtext.version = "${xtextVersion}"

sourceSets {
   main {
      java.srcDirs = ['src/main/java', 'src/main/xtext-gen']
      resources.srcDirs = ['src/main/resources', 'src/main/xtext-gen']
      xtendOutputDir = 'src/main/xtend-gen'
   }
   test {
      java.srcDirs = ['src/test/java', 'src/test/xtext-gen']
      resources.srcDirs = ['src/test/resources', 'src/test/xtext-gen']
      xtendOutputDir = 'src/test/xtend-gen'
   }
}

dependencies {
   compile project(':systemdescriptor')
   compile project(':systemdescriptor.ide')

   compile name: 'org.eclipse.core.resources_3.13.0.v20180512-1138'
   compile name: 'org.eclipse.equinox.common_3.10.0.v20180412-1130'
   compile name: 'org.eclipse.jface_3.14.0.v20180423-0714'
   compile name: 'org.eclipse.swt_3.107.0.v20180611-0422'
   compile name: 'org.eclipse.ui.workbench_3.111.0.v20180524-1156'
   compile name: 'org.eclipse.jdt.core_3.14.0.v20180528-0519'
   compile name: 'org.eclipse.ui.ide_3.14.0.v20180517-1842'
   compile name: 'org.eclipse.core.jobs_3.10.0.v20180427-1454'
   compile name: 'org.eclipse.core.runtime_3.14.0.v20180417-0825'
   compile name: 'org.eclipse.osgi_3.13.0.v20180409-1500'
   compile name: 'org.eclipse.core.commands_3.9.100.v20180404-1234'
   compile name: 'org.eclipse.compare_3.7.200.v20180418-1233'
   compile name: 'org.eclipse.emf.edit.ui_2.14.0.v20180213-0527'
   compile name: 'org.eclipse.emf.edit_2.13.0.v20180421-1151'
   compile name: 'org.eclipse.equinox.registry_3.8.0.v20180426-1327'
   compile name: 'org.eclipse.ui.workbench.texteditor_3.11.0.v20180419-2011'
   compile name: 'org.eclipse.jface.text_3.13.0.v20180527-1819'
   compile name: 'org.eclipse.text_3.6.300.v20180430-1330'
   compile name: 'org.eclipse.ui.editors_3.11.100.v20180512-1137'

   compile name: 'org.eclipse.xtext.ui_2.14.0.v20180523-0437'
   compile name: 'org.eclipse.xtext.ui.codetemplates.ui_2.14.0.v20180523-0437'
   compile(name: 'org.eclipse.xtext.ui.shared_2.14.0.v20180523-0437') { transitive = false }
   compile name: 'org.eclipse.xtext.builder_2.14.0.v20180523-0437'

   if (OperatingSystem.current().isLinux()) {
      compile name: 'org.eclipse.swt.gtk.linux.x86_64_3.107.0.v20180611-0422'
   } else {
      compile name: 'org.eclipse.swt.win32.win32.x86_64_3.107.0.v20180611-0422'
   }

   testCompile "junit:junit:${junitVersion}"
   testCompile "org.eclipse.xtext:org.eclipse.xtext.testing:${xtextVersion}"
}

def deployer = uploadArchives.repositories.mavenDeployer
def installer = install.repositories.mavenInstaller

[installer, deployer]*.pom*.whenConfigured { pom ->
   // The eclipse dependencies have no groupId or version so the build fails trying to parse the generated pom for this
   // project.
   pom.dependencies = []
}

jar {
   manifest {
      from('src/main/resources/META-INF/MANIFEST.MF') {
         // Replace the version with the version from the gradle build.
         eachEntry {
            if (getKey().equals('Bundle-Version')) {
               setValue(Versions.makeOsgiCompliantVersion("$version"))
            }
         }
      }
   }
   // Include 'plugin.xml'
   from('.', { include('plugin.xml') })
}

task copyDependencies(type: Copy) {
   from configurations.compile
   into { "$buildDir/dependencies" }
}

task createTemplates {
   tasks.withType(JavaCompile)*.dependsOn it
   sourceSets {
      main {
         resources {
            srcDir file("${project.buildDir}/templates")
         }
      }
   }
}

file('src/main/templates').eachDir { template ->
   task("createTemplate${template.name}", type:Zip) {
      from "${template}/build.gradle", {
         expand([cliPluginVersion: version])
      }
      from template, {
         exclude 'build.gradle'
      }
      destinationDir = file("${project.buildDir}/templates")
      archiveName = "${template.name}.${it.extension}"
      createTemplates.dependsOn it
   }
}



tasks.getByName('generateXtext').dependsOn(unzipEclipse)
tasks.getByName('build').dependsOn(copyDependencies)

ext {
   licenseDir = file("${project.buildDir}/license")
}

jar {
   from licenseDir
}

task copyLicense(type: Copy) {
   from licenseFile
   into licenseDir
   rename { "com.ngc.seaside.jellyfish.defaultLicense.txt" }
   expand license.ext.properties
}

jar.dependsOn(copyLicense)
test.dependsOn(copyLicense)
copyLicense.shouldRunAfter(processResources)
