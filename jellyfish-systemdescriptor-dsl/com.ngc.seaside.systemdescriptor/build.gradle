import com.ngc.seaside.gradle.util.Versions

dependencies {
	compile "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
	compile "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"
	testCompile "org.eclipse.xtext:org.eclipse.xtext.junit4:${xtextVersion}"
	testCompile "org.eclipse.xtext:org.eclipse.xtext.xbase.junit:${xtextVersion}"
}

configurations {
	mwe2 {
		extendsFrom compile
	}
}

dependencies {
	mwe2 "org.eclipse.emf:org.eclipse.emf.mwe2.launch:2.8.3"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${xtextVersion}"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${xtextVersion}"
}

clean.doFirst {
    delete file('model')
}

task generateXtextLanguage(type: JavaExec) {
	main = 'org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher'
	classpath = configurations.mwe2
	inputs.file "src/main/java/com/ngc/seaside/systemdescriptor/GenerateSystemDescriptor.mwe2"
	inputs.file "src/main/java/com/ngc/seaside/systemdescriptor/SystemDescriptor.xtext"
	outputs.dir "src/main/xtext-gen"
	args += "src/main/java/com/ngc/seaside/systemdescriptor/GenerateSystemDescriptor.mwe2"
	args += "-p"
	args += "rootPath=/${projectDir}/.."
}

generateXtext.dependsOn(generateXtextLanguage)
clean.dependsOn(cleanGenerateXtextLanguage)
eclipse.classpath.plusConfigurations += [configurations.mwe2]
//this is an eclipse plugin project
eclipseClasspath.enabled=false
cleanEclipseClasspath.enabled=false

tasks.getByName('javadoc') { doc ->
    options.tags = ['model', 'generated', 'ordered']
}

jar {
   manifest {
      from('META-INF/MANIFEST.MF') {
         // Replace the version with the version from the gradle build.
         eachEntry {
            if(getKey().equals('Bundle-Version')) {
               setValue(Versions.makeOsgiCompliantVersion("$version"))
            }
         }
      }
   }
   
   // Include 'plugin.xml'
   from('.', { include('plugin.xml') }) 
}
