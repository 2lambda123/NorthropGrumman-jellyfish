/*
 * UNCLASSIFIED
 *
 * Copyright 2020 Northrop Grumman Systems Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import com.ngc.seaside.gradle.util.Versions

dependencies {
   compile "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
   compile "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"
   compile "com.google.guava:guava:$guavaVersion"
   testCompile "junit:junit:${junitVersion}"
   testCompile "org.eclipse.xtext:org.eclipse.xtext.testing:${xtextVersion}"
}

configurations {
   mwe2 {
      extendsFrom compile
   }
}

dependencies {
   mwe2 "org.eclipse.emf:org.eclipse.emf.mwe2.launch:2.9.1.201705291010"
   mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${xtextVersion}"
   mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${xtextVersion}"
   mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${xtextVersion}"
   mwe2 "org.eclipse.xtext:xtext-antlr-generator:[2.1.1, 3)"
}

clean.doFirst {
   delete file('model')
}

def mwe2OutputStream = new OutputStream() {
   private def lineBuilder = new StringBuilder()
   private final def pattern = ~/^\d+\s+\[\w+\]\s+(?<level>\w+)\s+.*$/
   @Override
   def void write(byte[] b, int off, int len) {
      def str = new String(b, off, len).trim()
      def matcher = pattern.matcher(str)
      if (matcher.matches()) {
         def level = matcher.group('level')
         switch (level) {
         case 'INFO':
            logger.info(str)
            break
         case 'WARN':
            logger.warn(str)
            break
         case 'ERROR':
            logger.error(str)
            break
         }
      } else {
         super.write(b, off, len)
      }
   }
   @Override
   def void write(int b) {
      if (b == '\n') {
         logger.info(lineBuilder.toString())
         lineBuilder = new StringBuilder()
      } else {
         lineBuilder.append((char) b)
      }
   }
   @Override
   def void close() {
      if (lineBuilder.length() != 0) {
         logger.info(lineBuilder.toString())
      }
      super.close()
   }
}

task generateXtextLanguage(type: JavaExec) {
   main = 'org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher'
   classpath = configurations.mwe2
   inputs.file "src/main/java/com/ngc/seaside/systemdescriptor/GenerateSystemDescriptor.mwe2"
   inputs.file "src/main/java/com/ngc/seaside/systemdescriptor/SystemDescriptor.xtext"
   outputs.dir "src/main/xtext-gen"
   args += "src/main/java/com/ngc/seaside/systemdescriptor/GenerateSystemDescriptor.mwe2"
   args += "-p"
   args += "rootPath=/${projectDir}/.."
   standardOutput = mwe2OutputStream
}

generateXtext.dependsOn(generateXtextLanguage)
clean.dependsOn(cleanGenerateXtextLanguage)
eclipse.classpath.plusConfigurations += [configurations.mwe2]
//this is an eclipse plugin project
eclipseClasspath.enabled=false
cleanEclipseClasspath.enabled=false

tasks.getByName('javadoc') { doc ->
    options.tags = ['model', 'generated', 'ordered']
}
