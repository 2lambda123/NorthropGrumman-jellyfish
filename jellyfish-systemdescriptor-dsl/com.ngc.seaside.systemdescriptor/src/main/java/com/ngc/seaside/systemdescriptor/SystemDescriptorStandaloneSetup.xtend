/**
 * UNCLASSIFIED
 *
 * Copyright 2020 Northrop Grumman Systems Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
/*
 * generated by Xtext 2.10.0
 */
package com.ngc.seaside.systemdescriptor

import com.google.inject.Injector
import com.google.inject.Guice
import java.util.Collection
import com.google.inject.Module
import com.google.common.base.Preconditions
import org.eclipse.xtext.common.TerminalsStandaloneSetup

/**
 * Initialization support for running Xtext languages without Equinox extension registry.
 */
class SystemDescriptorStandaloneSetup extends SystemDescriptorStandaloneSetupGenerated {

	/**
	 * Creates an injector with the registered modules.
	 * 
	 * @param modules the modules to include in the Guice configuration
	 * @param includeDefault if true, the default SystemDescriptor modules will be included
	 * (this should almost always be true)
	 * @return the resulting Injector
	 */
	def Injector createInjector(Collection<Module> modules, boolean includeDefault) {
		Preconditions.checkNotNull(modules, "modules may not be null!")
		if (includeDefault) {
			modules.add(new SystemDescriptorRuntimeModule())
		}
		return Guice.createInjector(modules)
	}

	/**
	 * Creates an injector with the registered modules and performs EMF registration.
	 * 
	 * @param modules the modules to include in the Guice configuration
	 * @param includeDefault if true, the default SystemDescriptor modules will be included
	 * (this should almost always be true)
	 * @return the resulting Injector
	 */
	def Injector createInjectorAndDoEMFRegistration(Collection<Module> modules, boolean includeDefault) {
		TerminalsStandaloneSetup.doSetup()
		val injector = createInjector(modules, includeDefault);
		register(injector)
		return injector
	}

	def static void doSetup() {
		new SystemDescriptorStandaloneSetup().createInjectorAndDoEMFRegistration()
	}
}
