/*
 * UNCLASSIFIED
 *
 * Copyright 2020 Northrop Grumman Systems Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
buildscript {
    ext {
        versionsFile = file('../versions.gradle')
    }
    apply from: versionsFile, to: project

    repositories {
        mavenCentral()
        mavenLocal()
		maven {
           url "https://plugins.gradle.org/m2/"
        }
    }
    
    dependencies {
        classpath "org.xtext:xtext-gradle-plugin:$xtextPluginVersion"
        classpath "com.ngc.seaside:gradle.plugins:$seasidePluginsVersion"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqubePluginVersion"
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
    }
}

apply plugin: 'com.ngc.seaside.release.root'
apply plugin: 'com.ngc.seaside.root.parent'

subprojects {

    // Override conflicting versions.  We are stuck on a version of Guava that is < 22.0 because of XText dependencies.
    ext {
        guavaVersion = '15.0'
    }

    versionSettings {
        versionFile = versionsFile
    }

    if (name == 'systemdescriptor.ui') {
        apply plugin: 'eclipse'
        apply plugin: 'idea'
        apply plugin: 'org.xtext.xtend'
        apply plugin: 'com.ngc.seaside.checkstyle'
    } else {
        // Apply XText plugins.
        apply plugin: 'eclipse'
        apply plugin: 'idea'
        apply plugin: 'org.xtext.xtend'
        apply plugin: 'com.ngc.seaside.checkstyle'
        apply from: "${rootDir}/gradle/source-layout.gradle"
    }

    apply plugin: "com.github.hierynomus.license"
    apply plugin: 'com.ngc.seaside.ci'
	apply plugin: 'com.ngc.seaside.maven'
	apply plugin: 'com.ngc.seaside.repository'

    seasideCi {
        m2OutputDirectory = m2directory
        dependencyInfoReportFile = dependenciesReportFile
        deploymentScriptFile = m2DeploymentScriptFile
    }

    license {
        mapping('xtend', 'JAVADOC_STYLE')
        mapping('xtext', 'DOUBLESLASH_STYLE')
        mapping('mwe2', 'DOUBLESLASH_STYLE')
        exclude '**/*._trace'
        exclude '**/*.xtextbin'
        exclude '**/*.g'
        exclude '**/*.MF'
        exclude '**/*.tokens'
    }

    // Do not scan Xtext generated code.

    licenseMain {
        source = 'src/main/java'
    }

    licenseTest {
        source = 'src/test/java'
    }

    licenseFormatMain {
        source = 'src/main/java'
    }

    licenseFormatTest {
        source = 'src/test/java'
    }

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    configurations.all {
        exclude group: 'asm'
    }

    clean.doFirst {
        delete file('src/main/xtend-gen')
        delete file('src/main/xtext-gen')
        delete file('src/test/xtend-gen')
        delete file('src/test/xtext-gen')
        delete file('plugin.xml_gen')
    }

    repositories {
        //mavenCentral()
        //mavenLocal()

        // maven {
        //     // The name of the repo must match the repository name configured by the SeasideCi plugin.
        //     // You can override the name with seasideCi { remoteM2RepositoryName = 'foo' }
        //     name 'NexusConsolidated'
        //     url nexusConsolidated
        // }
    }

    /**
     * Create a task for generating the source jar. This will also be uploaded to Nexus.
     */
    task('sourcesJar', type: Jar, dependsOn: [classes]) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    /**
     * Create a task for generating the javadoc jar. This will also be uploaded to Nexus.
     */
    task('javadocJar', type: Jar, dependsOn: [classes, javadoc]) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    /**
     * Augment the jar name to be $groupId.$project.name).
     */
    tasks.getByName('sourcesJar') { jar ->
        archiveName = "${project.group}.${project.name}-${project.version}-${classifier}.jar"
    }

    tasks.getByName('javadocJar') { jar ->
        archiveName = "${project.group}.${project.name}-${project.version}-${classifier}.jar"
    }

    tasks.getByName('jar') { jar ->
        archiveName = "${project.group}.${project.name}-${project.version}.jar"
    }

    /**
     * Ensure to add the doclint option to the javadoc task if using Java 8.
     */
    if (JavaVersion.current().isJava8Compatible()) {
        tasks.getByName('javadoc') { doc ->
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
    if (JavaVersion.current().isJava9Compatible()) {
        tasks.getByName('javadoc') { doc ->
            options.addBooleanOption('html5', true)
        }
    }

    /**
     * Ensure we call the 2 new tasks for generating the javadoc and sources artifact jars.
     */
    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project(':systemdescriptor.ui') {
    apply plugin: 'com.ngc.seaside.eclipse.base'
    eclipseDistribution {
	   linuxVersion = 'eclipse-dsl-photon-R-linux-gtk-x86_64'
	   windowsVersion = 'eclipse-dsl-photon-R-win32-x86_64'
       linuxDownloadUrl = "https://mirror.umd.edu/eclipse/technology/epp/downloads/release/photon/R/eclipse-dsl-photon-R-linux-gtk-x86_64.tar.gz"
       windowsDownloadUrl = "https://ftp.osuosl.org/pub/eclipse/technology/epp/downloads/release/photon/R/eclipse-dsl-photon-R-win32-x86_64.zip"
       enablePluginsRepository()
    }
}
