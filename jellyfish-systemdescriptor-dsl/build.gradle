import org.gradle.internal.os.OperatingSystem
buildscript {
    ext {
        versionsFile = file('../versions.gradle')
    }
    apply from: versionsFile, to: project

    repositories {
        mavenLocal()

        maven {
            url nexusConsolidated
        }
    }
    dependencies {
        classpath "org.xtext:xtext-gradle-plugin:$xtextPluginVersion"
        classpath "com.ngc.seaside:gradle.plugins:$seasidePluginsVersion"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqubePluginVersion"
    }
}

apply plugin: 'com.ngc.seaside.release.root'

subprojects {
    apply plugin: 'com.ngc.seaside.ci'
    versionSettings {
        versionFile = versionsFile
    }
    seasideCi {
        m2OutputDirectory = m2directory
        dependencyInfoReportFile = dependenciesReportFile
        deploymentScriptFile = m2DeploymentScriptFile
    }

    if(name == 'systemdescriptor.ui') {
        // We have to apply the maven plugin here instead of in the build.gradle for
        // the UI plugin.  Otherwise, we get gradle build errors.  Weird.
        apply plugin: 'eclipse'
        apply plugin: 'idea'
        apply plugin: 'maven'
        apply plugin: 'org.xtext.xtend'
        apply plugin: 'com.ngc.seaside.checkstyle'
    } else if(name == 'systemdescriptor.feature') {
        apply plugin: 'com.ngc.seaside.eclipse.feature'
    } else if(name == 'systemdescriptor.updatesite') {
        apply plugin: 'com.ngc.seaside.eclipse.updatesite'
    } else {
        // Apply XText plugins.
        apply plugin: 'eclipse'
        apply plugin: 'idea'
        apply plugin: 'org.xtext.xtend'
        apply plugin: 'com.ngc.seaside.checkstyle'
        apply from: "${rootDir}/gradle/source-layout.gradle"
        apply from: "${rootDir}/gradle/maven-deployment.gradle"
    }

    if(name != 'systemdescriptor.feature'
        && name != 'systemdescriptor.updatesite') {

        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'

        configurations.all {
            exclude group: 'asm'
        }

        clean.doFirst {
            delete file('src/main/xtend-gen')
            delete file('src/main/xtext-gen')
            delete file('src/test/xtend-gen')
            delete file('src/test/xtext-gen')
            delete file('plugin.xml_gen')
        }

        repositories {
            mavenLocal()

            maven {
                // The name of the repo must match the repository name configured by the SeasideCi plugin.
                // You can override the name with seasideCi { remoteM2RepositoryName = 'foo' }
                name 'NexusConsolidated'
                url nexusConsolidated
            }
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    // Use the main repo for full releases.
                    repository(url: nexusReleases) {
                        // Make sure that nexusUsername and nexusPassword are in your
                        // ${gradle.user.home}/gradle.properties file.
                        authentication(userName: nexusUsername, password: nexusPassword)
                    }
                    // If the version has SNAPSHOT in the name, use the snapshot repo.
                    snapshotRepository(url: nexusSnapshots) {
                        authentication(userName: nexusUsername, password: nexusPassword)
                    }
                }
            }
        }

        /**
         * Create a task for generating the source jar. This will also be uploaded to Nexus.
         */
        task('sourcesJar', type: Jar, dependsOn: [classes]) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        /**
         * Create a task for generating the javadoc jar. This will also be uploaded to Nexus.
         */
        task('javadocJar', type: Jar, dependsOn: [classes, javadoc]) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        /**
         * Augment the jar name to be $groupId.$project.name).
         */
        tasks.getByName('sourcesJar') { jar ->
            archiveName = "${project.group}.${project.name}-${project.version}-${classifier}.jar"
        }

        tasks.getByName('javadocJar') { jar ->
            archiveName = "${project.group}.${project.name}-${project.version}-${classifier}.jar"
        }

        tasks.getByName('jar') { jar ->
          archiveName = "${project.group}.${project.name}-${project.version}.jar"
        }

        /**
         * Ensure to add the doclint option to the javadoc task if using Java 8.
         */
        if (JavaVersion.current().isJava8Compatible()) {
            tasks.getByName('javadoc') { doc ->
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }

        /**
         * Ensure we call the 2 new tasks for generating the javadoc and sources artifact jars.
         */
        artifacts {
            archives sourcesJar
            archives javadocJar
        }
    }
}

ext {
    linuxEclipseVersion = "eclipse-dsl-oxygen-2-linux-gtk-x86_64"
    windowsEclipseVersion = "eclipse-dsl-oxygen-2-win32-x86_64"
    linuxDownloadUrl = "http://10.207.42.135:8188/${linuxEclipseVersion}.zip"
    windowsDownloadUrl = "http://10.207.42.135:8188/${windowsEclipseVersion}.zip"

    // We do this because the UI project needs to reference dependencies in the Eclipse plugins directory.
    eclipseVersion = OperatingSystem.current().isLinux() ? linuxEclipseVersion : windowsEclipseVersion
    // This is the default cache location when the update site plugin needs to download Eclipse.
    eclipsePluginsDirectory = "${gradle.gradleUserHomeDir.absolutePath}/caches/eclipse/$eclipseVersion/plugins"
}
