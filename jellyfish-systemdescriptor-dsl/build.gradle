/*
 * UNCLASSIFIED
 * Northrop Grumman Proprietary
 * ____________________________
 *
 * Copyright (C) 2018, Northrop Grumman Systems Corporation
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains the property of
 * Northrop Grumman Systems Corporation. The intellectual and technical concepts
 * contained herein are proprietary to Northrop Grumman Systems Corporation and
 * may be covered by U.S. and Foreign Patents or patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this information
 * or reproduction of this material is strictly forbidden unless prior written
 * permission is obtained from Northrop Grumman.
 */
buildscript {
    ext {
        versionsFile = file('../versions.gradle')
    }
    apply from: versionsFile, to: project

    repositories {
        mavenLocal()

        maven {
            url nexusConsolidated
        }
    }
    dependencies {
        classpath "org.xtext:xtext-gradle-plugin:$xtextPluginVersion"
        classpath "com.ngc.seaside:gradle.plugins:$seasidePluginsVersion"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqubePluginVersion"
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
    }
}

apply plugin: 'com.ngc.seaside.release.root'
apply plugin: 'com.ngc.seaside.root.parent'

subprojects {

    // Override conflicting versions.  We are stuck on a version of Guava that is < 22.0 because of XText dependencies.
    ext {
        guavaVersion = '15.0'
    }

    versionSettings {
        versionFile = versionsFile
    }

    if (name == 'systemdescriptor.ui') {
        // We have to apply the maven plugin here instead of in the build.gradle for
        // the UI plugin.  Otherwise, we get gradle build errors.  Weird.
        apply plugin: 'eclipse'
        apply plugin: 'idea'
        apply plugin: 'maven'
        apply plugin: 'org.xtext.xtend'
        apply plugin: 'com.ngc.seaside.checkstyle'
    } else {
        // Apply XText plugins.
        apply plugin: 'eclipse'
        apply plugin: 'idea'
        apply plugin: 'org.xtext.xtend'
        apply plugin: 'com.ngc.seaside.checkstyle'
        apply from: "${rootDir}/gradle/source-layout.gradle"
        apply from: "${rootDir}/gradle/maven-deployment.gradle"
    }

    apply plugin: "com.github.hierynomus.license"
    apply plugin: 'com.ngc.seaside.ci'

    seasideCi {
        m2OutputDirectory = m2directory
        dependencyInfoReportFile = dependenciesReportFile
        deploymentScriptFile = m2DeploymentScriptFile
    }

    license {
        mapping('xtend', 'JAVADOC_STYLE')
        mapping('xtext', 'DOUBLESLASH_STYLE')
        mapping('mwe2', 'DOUBLESLASH_STYLE')
        exclude '**/*._trace'
        exclude '**/*.xtextbin'
        exclude '**/*.g'
        exclude '**/*.MF'
        exclude '**/*.tokens'
    }

    // Do not scan Xtext generated code.

    licenseMain {
        source = 'src/main/java'
    }

    licenseTest {
        source = 'src/test/java'
    }

    licenseFormatMain {
        source = 'src/main/java'
    }

    licenseFormatTest {
        source = 'src/test/java'
    }

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    configurations.all {
        exclude group: 'asm'
    }

    clean.doFirst {
        delete file('src/main/xtend-gen')
        delete file('src/main/xtext-gen')
        delete file('src/test/xtend-gen')
        delete file('src/test/xtext-gen')
        delete file('plugin.xml_gen')
    }

    repositories {
        mavenLocal()

        maven {
            // The name of the repo must match the repository name configured by the SeasideCi plugin.
            // You can override the name with seasideCi { remoteM2RepositoryName = 'foo' }
            name 'NexusConsolidated'
            url nexusConsolidated
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                // Use the main repo for full releases.
                repository(url: nexusReleases) {
                    // Make sure that nexusUsername and nexusPassword are in your
                    // ${gradle.user.home}/gradle.properties file.
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
                // If the version has SNAPSHOT in the name, use the snapshot repo.
                snapshotRepository(url: nexusSnapshots) {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
            }
        }
    }

    /**
     * Create a task for generating the source jar. This will also be uploaded to Nexus.
     */
    task('sourcesJar', type: Jar, dependsOn: [classes]) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    /**
     * Create a task for generating the javadoc jar. This will also be uploaded to Nexus.
     */
    task('javadocJar', type: Jar, dependsOn: [classes, javadoc]) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    /**
     * Augment the jar name to be $groupId.$project.name).
     */
    tasks.getByName('sourcesJar') { jar ->
        archiveName = "${project.group}.${project.name}-${project.version}-${classifier}.jar"
    }

    tasks.getByName('javadocJar') { jar ->
        archiveName = "${project.group}.${project.name}-${project.version}-${classifier}.jar"
    }

    tasks.getByName('jar') { jar ->
        archiveName = "${project.group}.${project.name}-${project.version}.jar"
    }

    /**
     * Ensure to add the doclint option to the javadoc task if using Java 8.
     */
    if (JavaVersion.current().isJava8Compatible()) {
        tasks.getByName('javadoc') { doc ->
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
    if (JavaVersion.current().isJava9Compatible()) {
        tasks.getByName('javadoc') { doc ->
            options.addBooleanOption('html5', true)
        }
    }

    /**
     * Ensure we call the 2 new tasks for generating the javadoc and sources artifact jars.
     */
    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project(':systemdescriptor.ui') {
    apply plugin: 'com.ngc.seaside.eclipse.base'
    eclipseDistribution {
       linuxVersion = "eclipse-dsl-photon-R-linux-gtk-x86_64"
       windowsVersion = "eclipse-dsl-photon-R-win32-x86_64"
       linuxDownloadUrl = "https://nexusrepomgr.ms.northgrum.com/repository/raw-ng-repo/ceacide/${linuxVersion}.zip"
       windowsDownloadUrl = "https://nexusrepomgr.ms.northgrum.com/repository/raw-ng-repo/ceacide/${windowsVersion}.zip"
       enablePluginsRepository()
    }
}
