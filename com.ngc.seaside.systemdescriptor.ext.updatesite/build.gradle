ext {
   buildDir = 'build'

   eclipseVersion = 'eclipse-dsl-neon-2-win32-x86_64'

   // The URL of the Eclipse Zip.  The Eclipse Zip is only downloaded if needed.
   eclipseDownloadUrl = "http://10.207.42.43/resources/jellyfish/${eclipseVersion}.zip"
   // The cache location of downloaded files.
   eclipseCache = '../.gradle/eclipse'
   // The local file to save the ZIP to.
   eclipseDownloadDestFile = "${eclipseCache}/${eclipseVersion}.zip"
   // This is the location where the Eclipse download will be unzipped to.
   // Note this name may change if the download URL changes to a different version of Eclipse.
   eclipseInstallationDirectory = file("${eclipseCache}/$eclipseVersion").getAbsolutePath()

   // This is the location of the Eclipse we use when compiling and building the
   // update site.
   eclipsePluginsDirectory = "$eclipseInstallationDirectory/plugins"

   // This is the location of the Eclispe exe we use to create the update site
   // metadata.
   eclipseExe = "$eclipseInstallationDirectory/eclipse.exe"
}

configurations {
   features

   // note that plugins is reserved
   eclipsePlugins {
      transitive = false
   }
}

dependencies {
   features project(path: ':systemdescriptor.ext.feature', configuration: 'feature')

   eclipsePlugins project(':systemdescriptor.model.impl.xtext')
   eclipsePlugins project(':systemdescriptor.service.impl.xtext')
}

task clean() {
   doLast {
      delete("$buildDir")
   }
}

task downloadEclipse() {
   doLast {
      def destFile = file("$eclipseDownloadDestFile")
      destFile.getParentFile().mkdir()
      println "Downloading Eclipse SDK from $eclipseDownloadUrl..."
      new URL("$eclipseDownloadUrl").withInputStream { is ->
         destFile.withOutputStream { it << is  }
      }
   }
}
downloadEclipse.onlyIf { !file("$eclipseDownloadDestFile").exists() }

task unzipEclipse(type: Copy, dependsOn: downloadEclipse) {
   from zipTree(file("$eclipseDownloadDestFile"))
   into "$eclipseCache"
}
unzipEclipse.onlyIf { !file("$eclipseInstallationDirectory").exists() }

task copyFeatures(type: Copy, dependsOn: unzipEclipse) {
   from configurations.features
   into { "$buildDir/updatesite/features" }

   // We have to rename the feature JARs built with Gradle to make the naming
   // convention expected by Eclipse or the feature won't install correctly.
   // If this is a SNAPSHOT build, make sure the SNAPSHOT part is formatted as a qualifier.
   if ("$project.version".endsWith("SNAPSHOT")) {
      // Reqex is: (fully.qualified.name)-(majorVersionNumber.minorVersionNumber(.optionalPatchNumber))-SNAPSHOT.jar
      // Will become: fully.qualified.name_majorVersionNumber.minorVersionNumber.optionalPatchNumber.SNAPSHOT.jar
      rename '(.+)-(\\d+\\.\\d+(\\.\\d+)?)-SNAPSHOT.jar', '$1_$2.SNAPSHOT.jar'
   } else {
      // Will become: fully.qualified.name_majorVersionNumber.minorVersionNumber.optionalPatchNumber.jar
      rename '(.+)-(\\d+\\.\\d+(\\.\\d+)?).jar', '$1_$2.jar'
   }
}

task copyPlugins(type: Copy, dependsOn: unzipEclipse) {
   from configurations.eclipsePlugins
   into { "$buildDir/updatesite/plugins" }

   // We have to rename the feature JARs built with Gradle to make the naming
   // convention expected by Eclipse or the feature won't install correctly.
   // If this is a SNAPSHOT build, make sure the SNAPSHOT part is formatted as a qualifier.
   if ("$project.version".endsWith("SNAPSHOT")) {
      // Reqex is: (fully.qualified.name)-(majorVersionNumber.minorVersionNumber(.optionalPatchNumber))-SNAPSHOT.jar
      // Will become: fully.qualified.name_majorVersionNumber.minorVersionNumber.optionalPatchNumber.SNAPSHOT.jar
      rename '(.+)-(\\d+\\.\\d+(\\.\\d+)?)-SNAPSHOT.jar', '$1_$2.SNAPSHOT.jar'
   } else {
      // Will become: fully.qualified.name_majorVersionNumber.minorVersionNumber.optionalPatchNumber.jar
      rename '(.+)-(\\d+\\.\\d+(\\.\\d+)?).jar', '$1_$2.jar'
   }
}

task createMetadata(dependsOn: [copyFeatures, copyPlugins]) {
   // Run eclipse.exe to build the update site metadata (the content.jar and artifacts.jar)
   // files.  Note that the arguments -metadataRepository and -artifactRepository want
   // "file URLs" but -source wants a plain old absolute path.
   doLast {
      project.exec {
         commandLine(
               "$eclipseExe",
               '-nosplash',
               '-application', 'org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher',
               '-compress',
               '-metadataRepository', file("$buildDir/updatesite/").toURI().toURL(),
               '-artifactRepository', file("$buildDir/updatesite/").toURI().toURL(),
               '-source', new File("$buildDir", "updatesite")
         )
      }
   }
}

task createZip(type: Zip, dependsOn: createMetadata) {
   from "$buildDir/updatesite"
   destinationDir = file("$buildDir")
   archiveName = "com.ngc.seaside.systemdescriptor.ext.updatesite-${project.version}.zip"
}

task createTarGz(type: Tar, dependsOn: createMetadata) {
   from "$buildDir/updatesite"
   compression = Compression.GZIP
   destinationDir = file("$buildDir")
   archiveName = "com.ngc.seaside.systemdescriptor.ext.updatesite-${project.version}.tar.gz"
}

task build (dependsOn: [createZip, createTarGz]) {
}

defaultTasks = ['build']
