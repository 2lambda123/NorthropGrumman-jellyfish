ext {
   buildDir = 'build'
}

repositories {
  flatDir {
    // Use the directory that contains the Eclipse plugins as a repository.
    dirs "$eclipsePluginsDirectory"
  }
}

configurations {
   features
   
   // note that plugins is reserved
   eclipsePlugins {
      transitive = false
   }
}

dependencies {
   features project(path: ':systemdescriptor.feature', configuration: 'feature')
   
   eclipsePlugins project(':systemdescriptor')
   eclipsePlugins project(':systemdescriptor.ide')
   eclipsePlugins project(':systemdescriptor.ui')
   
   eclipsePlugins name: 'org.antlr.runtime_3.2.0.v201101311130'
   eclipsePlugins name: 'org.apache.commons.logging_1.1.1.v201101211721'
   eclipsePlugins name: 'org.eclipse.emf.codegen_2.11.0.v20160526-0356'
   eclipsePlugins name: 'org.eclipse.emf.common_2.12.0.v20160420-0247'
   eclipsePlugins name: 'org.eclipse.emf.mwe.utils_1.3.20.v201605261103'
   eclipsePlugins name: 'org.eclipse.emf.mwe2.language.ui_2.9.0.v201605261103'
   eclipsePlugins name: 'org.eclipse.emf.mwe2.language_2.9.0.v201605261103'
   eclipsePlugins name: 'org.eclipse.emf.mwe2.launch_2.9.0.v201605261103'
   eclipsePlugins name: 'org.eclipse.emf.mwe2.lib_2.9.0.v201605261103'
   eclipsePlugins name: 'org.eclipse.emf.mwe2.runtime_2.9.0.v201605261103'
   eclipsePlugins name: 'org.eclipse.xtend.lib_2.10.0.v201605250459'
   eclipsePlugins name: 'org.eclipse.xtext.builder_2.10.0.v201605250459'
   eclipsePlugins name: 'org.eclipse.xtext.common.types.ui_2.10.0.v201605250459'
   eclipsePlugins name: 'org.eclipse.xtext.common.types_2.10.0.v201605250459'
   eclipsePlugins name: 'org.eclipse.xtext.ecore_2.10.0.v201605250459'
   eclipsePlugins name: 'org.eclipse.xtext.generator_2.10.0.v201605250459'
   eclipsePlugins name: 'org.eclipse.xtext.ide_2.10.0.v201605250459'
   eclipsePlugins name: 'org.eclipse.xtext.ui.codetemplates.ui_2.10.0.v201605250459'
   eclipsePlugins name: 'org.eclipse.xtext.ui.codetemplates_2.10.0.v201605250459'
   eclipsePlugins name: 'org.eclipse.xtext.ui.ecore_2.10.0.v201605250459'
   eclipsePlugins name: 'org.eclipse.xtext.ui.shared_2.10.0.v201605250459'
   eclipsePlugins name: 'org.eclipse.xtext.ui_2.10.0.v201605250459'
   eclipsePlugins name: 'org.eclipse.xtext.util_2.10.0.v201605250459'
   eclipsePlugins name: 'org.eclipse.xtext.xbase.lib_2.10.0.v201605250459'
   eclipsePlugins name: 'org.eclipse.xtext.xbase.ui_2.10.0.v201605250459'
   eclipsePlugins name: 'org.eclipse.xtext.xbase_2.10.0.v201605250459'
   eclipsePlugins name: 'org.eclipse.xtext.xtext.ui_2.10.0.v201605250459'
   eclipsePlugins name: 'org.eclipse.xtext_2.10.0.v201605250459'
   eclipsePlugins name: 'org.objectweb.asm_5.0.1.v201404251740'
}

task clean() {
   doLast {
      delete("$buildDir")
   }
}

task copyFeatures(type: Copy) {
   from configurations.features
   into { "$buildDir/updatesite/features" }
   
   // We have to rename the feature JARs built with Gradle to make the naming
   // convention expected by Eclipse or the feature won't install correctly.
   // If this is a SNAPSHOT build, make sure the SNAPSHOT part is formatted as a qualifier.
   if ("$project.version".endsWith("SNAPSHOT")) {
      // Reqex is: (fully.qualified.name)-(majorVersionNumber.minorVersionNumber(.optionalPatchNumber))-SNAPSHOT.jar
      // Will become: fully.qualified.name_majorVersionNumber.minorVersionNumber.optionalPatchNumber.SNAPSHOT.jar
      rename '(.+)-(\\d+\\.\\d+(\\.\\d+)?)-SNAPSHOT.jar', '$1_$2.SNAPSHOT.jar'
   } else {
      // Will become: fully.qualified.name_majorVersionNumber.minorVersionNumber.optionalPatchNumber.jar
      rename '(.+)-(\\d+\\.\\d+(\\.\\d+)?)-SNAPSHOT.jar', '$1_$2.SNAPSHOT.jar'
   }
}

task copyPlugins(type: Copy) {
   from configurations.eclipsePlugins
   into { "$buildDir/updatesite/plugins" }
   
   // We have to rename the feature JARs built with Gradle to make the naming
   // convention expected by Eclipse or the feature won't install correctly.
   // If this is a SNAPSHOT build, make sure the SNAPSHOT part is formatted as a qualifier.
   if ("$project.version".endsWith("SNAPSHOT")) {
      // Reqex is: (fully.qualified.name)-(majorVersionNumber.minorVersionNumber(.optionalPatchNumber))-SNAPSHOT.jar
      // Will become: fully.qualified.name_majorVersionNumber.minorVersionNumber.optionalPatchNumber.SNAPSHOT.jar
      rename '(.+)-(\\d+\\.\\d+(\\.\\d+)?)-SNAPSHOT.jar', '$1_$2.SNAPSHOT.jar'
   } else {
      // Will become: fully.qualified.name_majorVersionNumber.minorVersionNumber.optionalPatchNumber.jar
      rename '(.+)-(\\d+\\.\\d+(\\.\\d+)?)-SNAPSHOT.jar', '$1_$2.SNAPSHOT.jar'
   }
}

task createMetadata() {
}

task createZip(type: Zip, dependsOn: [copyFeatures, copyPlugins]) {
   from "$buildDir/updatesite"
   destinationDir = file("$buildDir")
   archiveName = "com.ngc.seaside.systemdescriptor.updatesite-${project.version}.zip"
}

task createTarGz(type: Tar, dependsOn: [copyFeatures, copyPlugins]) {
   from "$buildDir/updatesite"
   compression = Compression.GZIP
   destinationDir = file("$buildDir")
   archiveName = "com.ngc.seaside.systemdescriptor.updatesite-${project.version}.tar.gz"
}

task build(dependsOn: [createZip, createTarGz]) {
}

defaultTasks = ['build']