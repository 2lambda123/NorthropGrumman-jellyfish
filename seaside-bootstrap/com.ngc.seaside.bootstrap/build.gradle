apply plugin: 'application'

mainClassName = 'com.ngc.seaside.bootstrap.Main'

configurations {
    commandTemplate
}

dependencies {
    implementation project(':bootstrap.impl.provider')
    implementation project(':bootstrap.service.impl.templateservice')
    implementation project(':bootstrap.service.impl.promptuserservice')
    implementation project(':bootstrap.service.impl.propertyservice')
    implementation project(':bootstrap.service.impl.parameterservice')

    //include the blocs guice wrappers
    implementation "com.ngc.seaside:command.api:$version"
    implementation "com.ngc.seaside:bootstrap.api:$version"
    implementation project(':guice.modules')

    //core command projects
    implementation project(':bootstrap.command.impl.help')

    //external command projects
    implementation "com.ngc.seaside:bootstrap.command.impl.createjavabundle:$bootstrapCommandsVersion"
    commandTemplate "com.ngc.seaside:bootstrap.command.impl.createjavabundle:$bootstrapCommandsVersion:template@zip"
    implementation "com.ngc.seaside:bootstrap.command.impl.initjavagradlerepo:$bootstrapCommandsVersion"
    commandTemplate "com.ngc.seaside:bootstrap.command.impl.initjavagradlerepo:$bootstrapCommandsVersion:template@zip"
    implementation "com.ngc.seaside:bootstrap.command.impl.createbootstrapcommand:$bootstrapCommandsVersion"
    commandTemplate "com.ngc.seaside:bootstrap.command.impl.createbootstrapcommand:$bootstrapCommandsVersion:template@zip"

    implementation "org.osgi:osgi.core:$osgiVersion"
    implementation "com.ngc.blocs:component.impl.common.componentutilities:$blocsVersion"
    implementation "org.osgi:osgi.enterprise:$osgiVersion"
    implementation "com.google.inject:guice:$guiceVersion"
    implementation "com.google.inject.extensions:guice-multibindings:$guiceVersion"
}

/**
 * Copy the archive to the distribution directory and rename it to contain the groupId prefix.
 */
task copyCommandTemplate(type: Copy) {
    from configurations.commandTemplate {
        rename { name ->
            def artifacts = configurations.commandTemplate.resolvedConfiguration.resolvedArtifacts
            def artifact = artifacts.find { it.file.name == name }
            "${artifact.moduleVersion.id.group}.${artifact.name}-${artifact.moduleVersion.id.version}-${artifact.classifier}.${artifact.extension}"
        }
    }
    into "${buildDir}/distributions/${project.name}-${project.version}/resources/templates"
}

// Copies all templates to distribution zip.
applicationDistribution.from('src/main/resources/') {
    into 'resources/'
}

// Provide the app home directory has a system property.
applicationDefaultJvmArgs = ["-DappHome=APP_HOME_PLACEHOLDER", "-DNG_FW_HOME=APP_HOME_PLACEHOLDER"]

// Set the property to the value in the script (windows vs *nix).
startScripts {
    doLast {
        unixScript.text = unixScript.text.replace('APP_HOME_PLACEHOLDER', '\$APP_HOME')
        windowsScript.text = windowsScript.text.replace('APP_HOME_PLACEHOLDER', '%APP_HOME%')
    }
}

jar {
    //the application plugin requires that the script name be the project.name so this line
    //will overwrite the seaside parent plugin naming convention.
    archiveName = "${project.name}"
}
