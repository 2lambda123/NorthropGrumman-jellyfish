apply plugin: 'application'

mainClassName = "com.ngc.seaside.bootstrap.Main"

configurations {
    commandTemplate
}

dependencies {
    compile project(":bootstrap.impl.provider")
    compile project(":bootstrap.service.impl.templateservice")
    compile project(":bootstrap.service.impl.promptuserservice")
    compile project(":bootstrap.service.impl.propertyservice")
    compile project(":bootstrap.service.impl.parameterservice")

    //include the blocs guice wrappers
    compile "com.ngc.seaside:command.api:$apiVersion"
    compile "com.ngc.seaside:bootstrap.api:$apiVersion"
    compile project(":guice.modules")

    //core command projects
    compile project(":bootstrap.command.impl.help")
//    commandTemplate project(path: ":bootstrap.command.impl.help", configuration: "commandTemplate")

    //external command projects
    //this will eventually be replaced by downloadable commands once Nexus 3 has a useful REST API.
    compile "com.ngc.seaside:bootstrap.command.impl.createjavabundle:$bootstrapCommandsVersion"
    commandTemplate "com.ngc.seaside:bootstrap.command.impl.createjavabundle:$bootstrapCommandsVersion:template@zip"
    compile "com.ngc.seaside:bootstrap.command.impl.initjavagradlerepo:$bootstrapCommandsVersion"
    commandTemplate "com.ngc.seaside:bootstrap.command.impl.initjavagradlerepo:$bootstrapCommandsVersion:template@zip"
    compile "com.ngc.seaside:bootstrap.command.impl.createbootstrapcommand:$bootstrapCommandsVersion"
    commandTemplate "com.ngc.seaside:bootstrap.command.impl.createbootstrapcommand:$bootstrapCommandsVersion:template@zip"

    compile "org.osgi:osgi.core:$osgiVersion"
    compile "com.ngc.blocs:component.impl.common.componentutilities:$blocsVersion"
    compile "org.osgi:osgi.enterprise:$osgiVersion"
    compile "com.google.inject:guice:$guiceVersion"
    compile "com.google.inject.extensions:guice-multibindings:$guiceVersion"
    compile "org.apache.velocity:velocity:$velocityVersion"
    compile "commons-io:commons-io:$commonsIOVersion"
    compile "commons-lang:commons-lang:$commonsLangVersion"

    testCompile "junit:junit:$junitVersion"
}

/**
 * Copy the archive to the distribution directory and rename it to contain the groupId prefix.
 */
task copyCommandTemplate(type: Copy) {
    from configurations.commandTemplate {
        rename { name ->
            def artifacts = configurations.commandTemplate.resolvedConfiguration.resolvedArtifacts
            def artifact = artifacts.find { it.file.name == name }
            "${artifact.moduleVersion.id.group}.${artifact.name}-${artifact.moduleVersion.id.version}-${artifact.classifier}.${artifact.extension}"
        }
    }
    into "${buildDir}/distributions/${project.name}-${project.version}/resources/templates"
}

// Copies all templates to distribution zip.
applicationDistribution.from('src/main/resources/') {
    into 'resources/'
}

// Provide the app home directory has a system property.
applicationDefaultJvmArgs = ["-DappHome=APP_HOME_PLACEHOLDER", "-DNG_FW_HOME=APP_HOME_PLACEHOLDER"]

// Set the property to the value in the script (windows vs *nix).
startScripts {
    doLast {
        unixScript.text = unixScript.text.replace('APP_HOME_PLACEHOLDER', '\$APP_HOME')
        windowsScript.text = windowsScript.text.replace('APP_HOME_PLACEHOLDER', '%APP_HOME%')
    }
}

jar {
    //the application plugin requires that the script name be the project.name so this line
    //will overwrite the seaside parent plugin naming convention.
    archiveName = "${project.name}"
}
