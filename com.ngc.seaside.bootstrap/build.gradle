apply plugin: 'application'

mainClassName = "com.ngc.seaside.bootstrap.Bootstrap"

configurations {
    templates
}

dependencies {
    compile project(":command.api")
    compile project(":bootstrap.api")
    compile project(":bootstrap.impl.provider")
    compile project(":bootstrap.command.impl.bundlecommand")
    compile project(":bootstrap.command.impl.projectcommand")
    compile project(":bootstrap.service.impl.templateservice")
    compile project(":bootstrap.service.impl.promptuserservice")
    compile project(":bootstrap.service.impl.propertyservice")

    compile project(":bootstrap.command.impl.createjavabundle")
//    templates project(path: ":bootstrap.command.impl.createjavabundle", configuration: "templates")

    templates "com.ngc.seaside:bootstrap.command.impl.createjavabundle:1.0-SNAPSHOT:template@zip"

    compile "com.ngc.blocs:blocs-core:$blocsVersion"
    compile "org.osgi:osgi.core:$osgiVersion"
    compile "com.ngc.blocs:component.impl.common.componentutilities:$blocsVersion"
    compile "com.ngc.blocs:service.api:$blocsVersion"
    compile "com.ngc.blocs:service.log.impl.common.logservice:$blocsVersion"
    compile "com.ngc.blocs:service.resource.impl.common.resourceservice:$blocsVersion"
    compile "org.osgi:osgi.enterprise:$osgiVersion"
    compile "com.google.inject:guice:$guiceVersion"
    compile "com.google.inject.extensions:guice-multibindings:$guiceVersion"
    compile "org.apache.velocity:velocity:$velocityVersion"
    compile "commons-io:commons-io:$commonsIOVersion"
    compile "commons-lang:commons-lang:$commonsLangVersion"

    testCompile "junit:junit:$junitVersion"
}

task copyTemplate(type: Copy) {
    from configurations.templates
    into "${buildDir}/distributions/${project.name}-${project.version}/resources/templates"
}

// Copies all templates to distribution zip.
applicationDistribution.from('src/main/resources/') {
    into 'resources/'
}


// Provide the app home directory has a system property.
applicationDefaultJvmArgs = ["-DappHome=APP_HOME_PLACEHOLDER", "-DNG_FW_HOME=APP_HOME_PLACEHOLDER"]

// Set the property to the value in the script (windows vs *nix).
startScripts {
    doLast {
        unixScript.text = unixScript.text.replace('APP_HOME_PLACEHOLDER', '\$APP_HOME')
        windowsScript.text = windowsScript.text.replace('APP_HOME_PLACEHOLDER', '%APP_HOME%')
    }
}

jar {
    //the application plugin requires that the script name be the project.name so this line
    //will overwrite the seaside parent plugin naming convention.
    archiveName = "${project.name}"
}

task unzip( type: Copy , dependsOn: copyTemplate) {
    def zipFile = file("${buildDir}/distributions/${project.name}-${project.version}.zip")
    def outputDir = file("${buildDir}/distributions/")

    from zipTree(zipFile)
    into outputDir
}

install.dependsOn unzip
build.dependsOn unzip