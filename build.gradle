import com.ngc.seaside.jellyfish.cli.gradle.tasks.JellyFishCliCommandTask
import com.ngc.seaside.jellyfish.examples.tasks.RegressionDiffTask
import org.gradle.internal.os.OperatingSystem

apply plugin: 'com.ngc.seaside.parent'

group = 'com.ngc.seaside'
version = '1.0.0-SNAPSHOT'

buildscript {

    ext {
        jellyfishCliVersion = '1.8.2-SNAPSHOT'
    }
    
    repositories {
        mavenLocal()

        maven {
            url nexusConsolidated
        }
    }

    dependencies {
        classpath 'com.ngc.seaside:gradle.plugins:2.1.1'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5'
        classpath "com.ngc.seaside:jellyfish.cli.gradle.plugins:$jellyfishCliVersion"
    }
}

ext {
	systemDescriptorProjectsFolderName = 'system-descriptor-projects'
	regressionsFolderName = 'regressions'
	generatedFolderName = 'generatedOutput'
	expectedFolderName = 'expectedOutput'
}

task('buildSystemDescriptorProjects', description: 'builds and installs all of the system descriptor projects') {
    build.dependsOn it
}

file(systemDescriptorProjectsFolderName).eachDir { folder -> 
    // Run 'gradle clean build install' on system descriptor project
    def sdTask = task("buildSd${folder.name}", type: GradleBuild) {
	    dir = folder
		tasks = ['clean', 'build', 'install']
		startParameter.projectProperties['jellyfishCliVersion'] = jellyfishCliVersion
	}
	buildSystemDescriptorProjects.dependsOn sdTask
}

task('cleanRegressions', description: 'Cleans the build and generated folders for all regressions') {
    clean.dependsOn it
}

task('generateRegressions', description: 'Generates the output for all regressions')
task('buildGeneratedRegressions', description: 'Builds the generated output for all regressions')
task('buildExpectedRegressions', description: 'Builds the expected output for all regressions')
task('reviseExpectedRegressions', description: 'Replaces the expected output with the generated output for all regressions')

file(regressionsFolderName).eachDir { folder ->
    def regressionName = folder.name.capitalize()
    def expectedFolder = file("${folder}/${expectedFolderName}")
    def generatedFolder = file("${folder}/${generatedFolderName}")
    
    // Clean build folders and generated folder
    task("cleanRegression${regressionName}") {
        delete generatedFolder
        expectedFolder.traverse(type: groovy.io.FileType.DIRECTORIES, maxDepth: 3, visitRoot: true) {
            if (it.name == 'build') {
                delete it
                return groovy.io.FileVisitResult.SKIP_SIBLINGS
            }
            if (it.name == 'src') {
                return groovy.io.FileVisitResult.SKIP_SIBLINGS
            }
        }
        cleanRegressions.dependsOn it
    }
    
    // Generate project using jellyfish cli
    def generateTask = createGenerationTask("generateRegression${regressionName}", folder, regressionName)
    generateRegressions.dependsOn generateTask
    
    // Build the expected and generated projects
    def expectedBuildTask = createRegressionBuildTask("buildExpectedRegression${regressionName}", expectedFolder)
    buildGeneratedRegressions.dependsOn expectedBuildTask

    def generatedBuildTask = createRegressionBuildTask("buildGeneratedRegression${regressionName}", generatedFolder)
    generatedBuildTask.dependsOn generateTask
    buildGeneratedRegressions.dependsOn generatedBuildTask
    
    // Diff the expected and generated projects
    def diffTask = task("diffRegression${regressionName}", dependsOn: [expectedBuildTask, generatedBuildTask], type: RegressionDiffTask) {
        regression = regressionName
        expectedDir = expectedFolder
        generatedDir = generatedFolder
    }
    
    task("regression${regressionName}",
         group: test.group,
         description: "Run regression test ${regressionName}",
         dependsOn: [generateTask, generatedBuildTask, diffTask]) {
         
        test.dependsOn it
    }
    
    task("reviseExpectedRegression${regressionName}", type: null, dependsOn: generateTask) {
        doLast {
            delete expectedFolder
            copy {
                from generatedFolder
                into expectedFolder
            }
        }
        it.mustRunAfter expectedBuildTask
        reviseExpectedRegressions.dependsOn it
    }
    
}

// Creates a task that will generate the regression output, with the given task name, regression folder, and regression name
def createGenerationTask(name, folder, regressionName) {
    def propertiesFile = file("${folder}/jellyfish.properties")
    if (!propertiesFile.isFile()) {
        throw new GradleException("Regression ${regressionName} is missing jellyfish.properties file")
    }

    Properties properties = new Properties()
    propertiesFile.withInputStream {
        properties.load(it)
    }

    properties['outputDirectory'] = "${folder}/${generatedFolderName}"
    properties['clean'] = 'true'
    if (properties.containsKey('inputDir')) {
        properties['inputDir'] = "${folder}/${properties['inputDir']}"
    }

    def generateTask = task(name, type: JellyFishCliCommandTask) {
        command = properties['command']
        inputDir = properties['inputDir']
        arguments = properties
    }
}

// Creates a task to build a gradle project. This task will search sub-directories until it finds a build.gradle.
// This task will also copy the folder to a temp directory to fix windows path length issues
def createRegressionBuildTask(name, folder) {
    def buildTask = task(name)
    buildTask.doLast {
        folder.traverse(type: groovy.io.FileType.DIRECTORIES, maxDepth: 3) { buildFolder ->
            if (file("${buildFolder}/build.gradle").isFile()) {
            	
            	def tempFolder
            	if (OperatingSystem.current().isWindows()) {
                    tempFolder = java.nio.file.Files.createTempDirectory(null).toFile()
                    copy {
                        from buildFolder
                        into tempFolder
                    }
                } else {
                    tempFolder = buildFolder
                }

                def gradleBuildTask = task(type: GradleBuild) {}
                gradleBuildTask.dir = tempFolder
                gradleBuildTask.tasks = ['clean', 'build']
                gradleBuildTask.startParameter.excludedTaskNames = ['test']
                gradleBuildTask.execute()

                if (OperatingSystem.current().isWindows()) {
	                copy {
	                    from tempFolder
	                    into buildFolder
	                }
	                delete tempFolder
                }

                return groovy.io.FileVisitResult.SKIP_SIBLINGS
            }
        }
    }
    return buildTask
}

dependencies {
    testCompile gradleApi()
    testCompile "com.ngc.seaside:jellyfish.cli.gradle.plugins:$jellyfishCliVersion"
    testCompile "commons-io:commons-io:2.5"
    testCompile "org.mockito:mockito-core:2.7.14"
    testCompile "junit:junit:4.12"
}

test {
   testLogging {
      showStandardStreams = true  
   }
}

processTestResources {
    expand(jellyfishCliVersion: "${jellyfishCliVersion}")
}
