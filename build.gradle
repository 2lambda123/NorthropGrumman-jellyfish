buildscript {
	repositories {
		mavenLocal()
        maven {
            url nexusConsolidated
        }
	}
	dependencies {
		classpath 'org.xtext:xtext-gradle-plugin:1.0.2'
	}
}

subprojects {
	ext.xtextVersion = '2.10.0'
	
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	
	// Don't apply the XText configuration to the UI plugin.
	if(!name.equals('systemdescriptor.ui')) {
		apply plugin: 'org.xtext.xtend'
		apply from: "${rootDir}/gradle/source-layout.gradle"
		apply from: "${rootDir}/gradle/maven-deployment.gradle"
	} else {
	   // We have to apply the maven plugin here instead of in the build.gradle for 
	   // the UI plugin.  Otherwise, we get gradle build errors.  Weird.
	   apply plugin: 'maven'
	}
	
	group = 'com.ngc.seaside'
	version = '0.4.1-SNAPSHOT'
	
	sourceCompatibility = '1.8'
	targetCompatibility = '1.8'
	
	configurations.all {
		exclude group: 'asm'
	}
	
	repositories {
      	mavenLocal()

        maven {
	        url nexusConsolidated
        }
	}

    uploadArchives {
        repositories {
            mavenDeployer {
                // Use the main repo for full releases.
                repository(url: nexusReleases) {
                    // Make sure that nexusUsername and nexusPassword are in your
                    // ${gradle.user.home}/gradle.properties file.
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
                // If the version has SNAPSHOT in the name, use the snapshot repo.
                snapshotRepository(url: nexusSnapshots) {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
            }
        }
    }	
    
	/**
     * Create a task for generating the source jar. This will also be uploaded to Nexus.
     */
    task('sourcesJar', type: Jar, dependsOn: [classes]) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    /**
     * Create a task for generating the javadoc jar. This will also be uploaded to Nexus.
     */
    task('javadocJar', type: Jar, dependsOn: [classes, javadoc]) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    
	/**
     * Augment the jar name to be $groupId.$project.name).
     */
    tasks.getByName('sourcesJar') { jar ->
        archiveName = "${project.group}.${project.name}-${project.version}-${classifier}.jar"
    }

    tasks.getByName('javadocJar') { jar ->
        archiveName = "${project.group}.${project.name}-${project.version}-${classifier}.jar"
    }
    
    tasks.getByName('jar') { jar ->
      archiveName = "${project.group}.${project.name}-${project.version}.jar"
    }
    
    /**
	 * Ensure to add the doclint option to the javadoc task if using Java 8.
	 */
	if (JavaVersion.current().isJava8Compatible()) {
	    tasks.getByName('javadoc') { doc ->
	        options.addStringOption('Xdoclint:none', '-quiet')
	    }
	}

    /**
     * Ensure we call the 2 new tasks for generating the javadoc and sources artifact jars.
     */
    artifacts {
        archives sourcesJar
        archives javadocJar
    }

}
