apply plugin: 'com.ngc.seaside.parent'

group = 'com.ngc.seaside'
version = '1.0.0-SNAPSHOT'

buildscript {
    repositories {
        mavenLocal()

        maven {
            url nexusConsolidated
        }
    }

    dependencies {
        classpath 'com.ngc.seaside:gradle.plugins:2.1.1'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5'
    }
}

ext {
    jellyfishCliVersion = '1.8.2-SNAPSHOT'
	systemDescriptorProjectsFolderName = 'system-descriptor-projects'
	regressionsFolderName = 'regressions'
	generatedFolderName = 'generatedOutput'
	expectedFolderName = 'expectedOutput'
}

// Primary task for running 'gradle clean build install' on all system descriptor projects
task('buildSystemDescriptorProjects', description: 'builds and installs all of the system descriptor projects') {
    build.dependsOn it
}

file(systemDescriptorProjectsFolderName).eachDir { folder -> 
    // Run 'gradle clean build install' on system descriptor project
    def sdTask = task("buildSd${folder.name}", type: GradleBuild) {
	    dir = folder
		tasks = ['clean', 'build', 'install']
		startParameter.projectProperties['jellyfishCliVersion'] = jellyfishCliVersion
	}
	buildSystemDescriptorProjects.dependsOn sdTask
}

// Primary task for cleaning build and generated folders for all regressions
task('cleanRegression') {
    clean.dependsOn it
}

file(regressionsFolderName).eachDir { folder ->
    def regressionName = folder.name.capitalize()
    def expectedFolder = file("${folder}/${expectedFolderName}")
    def generatedFolder = file("${folder}/${generatedFolderName}")
    
    // Clean build folders and generated folder
    task("cleanRegression${regressionName}") {
        delete generatedFolder
        expectedFolder.traverse(type: groovy.io.FileType.DIRECTORIES, maxDepth: 3, visitRoot: true) {
            if (it.name == 'build') {
                delete it
                return groovy.io.FileVisitResult.SKIP_SIBLINGS
            }
            if (it.name == 'src') {
                return groovy.io.FileVisitResult.SKIP_SIBLINGS
            }
        }
        cleanRegression.dependsOn it
    }
    
}

dependencies {
    testCompile gradleApi()
    testCompile "com.ngc.seaside:jellyfish.cli.gradle.plugins:$jellyfishCliVersion"
    testCompile "commons-io:commons-io:2.5"
    testCompile "org.mockito:mockito-core:2.7.14"
    testCompile "junit:junit:4.12"
}

test {
   testLogging {
      showStandardStreams = true  
   }
}

processTestResources {
    expand(jellyfishCliVersion: "${jellyfishCliVersion}")
}
