apply plugin: 'groovy'
apply plugin: 'maven'

configurations {
    commandTemplate
}

dependencies {
	compile project(":jellyfish")
    compile "com.ngc.seaside:gradle.plugins:$seasideGradlePluginsVersion"
    // Note we have this compile time dependency to provide an alternate implementation for the Gradle version of
    // JellyFish.
    compile "com.ngc.seaside:bootstrap.service.impl.templateservice:$bootstrapVersion"

    compile gradleApi()
    compile localGroovy()
    compile "com.google.inject:guice:$guiceVersion"
    compile "com.google.guava:guava:$guavaVersion"

    commandTemplate project(path: ":jellyfish.cli.command.createjavadistribution", configuration: "commandTemplate")
    commandTemplate project(path: ":jellyfish.cli.command.createjellyfishcommand", configuration: "commandTemplate")
    commandTemplate project(path: ":jellyfish.cli.command.createprotocolbuffermessages", configuration: "commandTemplate")
    commandTemplate project(path: ":jellyfish.cli.command.createjellyfishgradleproject", configuration: "commandTemplate")
    commandTemplate project(path: ":jellyfish.cli.command.createjavaevents", configuration: "commandTemplate")
    commandTemplate project(path: ":jellyfish.cli.command.createjavapubsubconnector", configuration: "commandTemplate")
    commandTemplate project(path: ":jellyfish.cli.command.report.requirementsverification", configuration: "commandTemplate")
    commandTemplate project(path: ":jellyfish.cli.command.report.requirementsallocation", configuration: "commandTemplate")
    commandTemplate project(path: ":jellyfish.cli.command.createjavaservice", configuration: "commandTemplate")
    commandTemplate project(path: ":jellyfish.cli.command.createjavaserviceproject", configuration: "commandTemplate")
    commandTemplate project(path: ":jellyfish.cli.command.createjavaservicebase", configuration: "commandTemplate")
    commandTemplate project(path: ":jellyfish.cli.command.createjavaserviceconfig", configuration: "commandTemplate")
    commandTemplate project(path: ":jellyfish.cli.command.createjavacucumbertests", configuration: "commandTemplate")
}

// Include the command templates in the JAR.
jar {
    from "${buildDir}/commands-templates/"
}

processResources {
    expand(version: version)
}

task copyCommandTemplate(type: Copy) {
    from configurations.commandTemplate {
        rename { name ->
            def artifacts = configurations.commandTemplate.resolvedConfiguration.resolvedArtifacts
            def artifact = artifacts.find { it.file.name == name }
            "${artifact.moduleVersion.id.group}.${artifact.name}-${artifact.moduleVersion.id.version}-${artifact.classifier}.${artifact.extension}"
        }
    }
    into "${buildDir}/commands-templates/templates/"
}

jar.dependsOn(copyCommandTemplate)

