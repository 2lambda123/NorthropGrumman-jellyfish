apply plugin: 'application'

mainClassName = "com.ngc.seaside.jellyfish.JellyFish"

run {
	if ( project.hasProperty("appArgs") ) {
		def matcher = appArgs =~ /"(?:[^\\"]|\\[\\"])*"|'(?:[^\\']|\\[\\'])*'|(?:[^\s\\"']|\\[\\"'])+/
		def _args = []
		while (matcher.find()) {
			String _arg = matcher.group();
			if (_arg.length() > 1 && ((_arg.startsWith("'") && _arg.endsWith("'"))
					|| (_arg.startsWith("\"") && _arg.endsWith("\"")))) {
				_arg = _arg.substring(1, actual.length() - 1);
			}
			_arg = _arg.replace($/\\/$, $/\/$).replace($/\"/$, $/"/$).replace($/\'/$, $/'/$);
			_args += _arg
		}
		args _args
	}
}

dependencies {

    compile project(":jellyfish.impl.provider")

    compile "com.ngc.blocs:service.api:$blocsVersion"
    compile "com.google.guava:guava:$guavaVersion"
    compile "org.osgi:osgi.core:$osgiVersion"
    compile "com.ngc.blocs:component.impl.common.componentutilities:$blocsVersion"
    compile "com.ngc.blocs:service.log.impl.common.logservice:$blocsVersion"
    compile "com.ngc.blocs:service.resource.impl.common.resourceservice:$blocsVersion"
    compile "org.osgi:osgi.enterprise:$osgiVersion"
    compile "com.google.inject:guice:$guiceVersion"
    compile "com.google.inject.extensions:guice-multibindings:$guiceVersion"
    compile "commons-io:commons-io:$commonsIOVersion"
    compile "commons-lang:commons-lang:$commonsLangVersion"
    
    testCompile "com.ngc.blocs:test.impl.common.testutilities:$blocsVersion"
	testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
}

// Copies all templates to distribution zip.
applicationDistribution.from('src/main/resources/') {
    into 'bin/resources'
}


jar {
    manifest {
        // Uncomment the following line if your bundle needs to export its packages.
         attributes('Export-Package': 'com.ngc.seaside.jellyfish.*')
    }
}

