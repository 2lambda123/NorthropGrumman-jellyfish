apply plugin: 'application'

mainClassName = "com.ngc.seaside.jellyfish.JellyFish"

configurations {
    commandTemplate
}

dependencies {
    compile project(":jellyfish.impl.provider")

    compile project(":jellyfish.cli.command.samplecommand")
    commandTemplate project(path: ":jellyfish.cli.command.samplecommand", configuration: "commandTemplate")

    compile project(":jellyfish.cli.command.createjavadistribution")
    commandTemplate project(path: ":jellyfish.cli.command.createjavadistribution", configuration: "commandTemplate")

    compile project(":jellyfish.cli.command.createjellyfishcommand")
    commandTemplate project(path: ":jellyfish.cli.command.createjellyfishcommand", configuration: "commandTemplate")
    
    compile project(":jellyfish.cli.command.createdomain")
    commandTemplate project(path: ":jellyfish.cli.command.createdomain", configuration: "commandTemplate")

 	 compile project(":jellyfish.cli.command.createprotocolbuffermessages")
    commandTemplate project(path: ":jellyfish.cli.command.createprotocolbuffermessages", configuration: "commandTemplate")

    compile project(":jellyfish.cli.command.createjellyfishgradleproject")
    commandTemplate project(path: ":jellyfish.cli.command.createjellyfishgradleproject", configuration: "commandTemplate")
    
    compile project(":jellyfish.cli.command.createjavaevents")
    commandTemplate project(path: ":jellyfish.cli.command.createjavaevents", configuration: "commandTemplate")

    compile "com.ngc.blocs:service.api:$blocsVersion"
    compile "com.google.guava:guava:$guavaVersion"
    compile "org.osgi:osgi.core:$osgiVersion"
    compile "com.ngc.blocs:component.impl.common.componentutilities:$blocsVersion"
    compile "com.ngc.blocs:service.log.impl.common.logservice:$blocsVersion"
    compile "com.ngc.blocs:service.resource.impl.common.resourceservice:$blocsVersion"
    compile "org.osgi:osgi.enterprise:$osgiVersion"
    compile "com.google.inject:guice:$guiceVersion"
    compile "com.google.inject.extensions:guice-multibindings:$guiceVersion"
    compile "commons-io:commons-io:$commonsIOVersion"
    compile "commons-lang:commons-lang:$commonsLangVersion"
    compile "com.ngc.seaside:systemdescriptor.service.impl.xtext:$jellyfishEXTVersion"
    
    testCompile "com.ngc.blocs:test.impl.common.testutilities:$blocsVersion"
	 testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
}

applicationDistribution.from(project(':jellyfish.cli.command.createprotocolbuffermessages').file('src/main/resources/proto-messages.vm')) {
	into 'resources'
}

applicationDistribution.from('src/main/resources') { 
	into 'resources'
}

// Provide the app home directory has a system property.
applicationDefaultJvmArgs = ["-DappHome=APP_HOME_PLACEHOLDER", "-DNG_FW_HOME=APP_HOME_PLACEHOLDER"]

// Set the property to the value in the script (windows vs *nix).
startScripts {
    doLast {
        unixScript.text = unixScript.text.replace('APP_HOME_PLACEHOLDER', '\$APP_HOME')
        windowsScript.text = windowsScript.text.replace('APP_HOME_PLACEHOLDER', '%APP_HOME%')
    }
}

/**
 * Copy the archive to the distribution directory and rename it to contain the groupId prefix.
 */
task copyCommandTemplate(type: Copy) {
    from configurations.commandTemplate {
        rename { name ->
            def artifacts = configurations.commandTemplate.resolvedConfiguration.resolvedArtifacts
            def artifact = artifacts.find { it.file.name == name }
            "${artifact.moduleVersion.id.group}.${artifact.name}-${artifact.moduleVersion.id.version}-${artifact.classifier}.${artifact.extension}"
        }
    }
    into "${buildDir}/distributions/${project.name}-${project.version}/resources/templates"
}

/**
 * Unzip the distribution created by the application plugin to make it easier when
 * developing the CLI.
 */
task unzipDistribution( type: Copy , dependsOn: copyCommandTemplate) {
    def zipFile = file("${buildDir}/distributions/${project.name}-${project.version}.zip")
    def outputDir = file("${buildDir}/distributions/")

    from zipTree(zipFile)
    into outputDir
}

install.dependsOn unzipDistribution
build.dependsOn unzipDistribution
