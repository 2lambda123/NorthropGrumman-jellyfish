apply plugin: "com.iadams.sonar-packaging"

repositories {
   mavenLocal()

   maven {
      url nexusConsolidated
   }
}

dependencies {
   // Do not use the new scopes (api, implementation, etc) here.
   // Use the old compile scope because the sonar-packaging plugin
   // will only embed dependencies that are under the compile scope.
   compile project(':jellyfish')
   compile "com.ngc.seaside:guice.modules:$version"
   compile "com.ngc.seaside:systemdescriptor.model.api:$version"
   compile "com.ngc.seaside:systemdescriptor.service.api:$version"
   compile "com.ngc.seaside:systemdescriptor.service.impl.xtext:$version"

   compile "com.ngc.seaside:systemdescriptor.service.impl.m2repositoryservice:$version"
   compile "com.ngc.blocs:service.api:$blocsVersion"
   compile "com.google.guava:guava:$guavaVersion"
   compile "com.google.inject:guice:$guiceVersion"
   // Make sure this has a scope of provided.
   provided "org.sonarsource.sonarqube:sonar-plugin-api:$sonarqubeVersion"

   testCompile "junit:junit:$junitVersion"
   testCompile "org.mockito:mockito-core:$mockitoVersion"
   // Include the SLF4J logging adapter so we can see logs during test execution.
   testCompile "ch.qos.logback:logback-core:1.1.7"
   testCompile "ch.qos.logback:logback-classic:1.1.7"
}

sonarPackaging {
   pluginKey = 'systemdescriptor'
   pluginName = 'SonarSystemDescriptor'
   pluginClass = 'com.ngc.seaside.jellyfish.sonarqube.JellyfishPlugin'
   pluginDescription = 'Adds support for scanning System Descriptor projects.'
   pluginUrl = ''
   pluginSourceUrl = 'https://github.ms.northgrum.com/CEACIDE/jellyfish'
}

def mainGuiceModulesFile = {
   def resource = project.file("${project.projectDir.absolutePath}/src/main/resources/guice-modules")
   resource.parentFile.mkdir()
   resource.createNewFile()
   return resource
}.call()

tasks.create('buildModuleDependencyFiles').doLast {
   def destinationDir = "${rootProject.buildDir.absolutePath}/dependencies"
   def modules = new HashSet<String>()

   (configurations.compile + configurations.testCompile).files.forEach { file ->
      def tmpDir = project.mkdir("${destinationDir}/tmp").absolutePath

      if (file.absolutePath.endsWith('.jar')) {
         def output = new ByteArrayOutputStream()
         project.exec {
            workingDir destinationDir
            commandLine 'unzip', '-o', '-d', tmpDir, file.absolutePath
            standardOutput = output
         }

         def module = output.toString().split('\n').find { line ->
            line.contains('com.google.inject.Module')
         }

         if (module != null) {
            def moduleFile = project.file("${tmpDir}/META-INF/services/com.google.inject.Module")
            modules.addAll(moduleFile.readLines().stream().map { line -> line.trim() }.collect())
         }
      }

      project.delete(tmpDir)
   }

   mainGuiceModulesFile.write(modules.join('\n'))

   project.delete(destinationDir)
}

tasks.create('cleanModuleDependencyFiles').doLast {
   project.delete(mainGuiceModulesFile)
}

tasks.findByName('compileJava').dependsOn('buildModuleDependencyFiles')
tasks.findByName('clean').dependsOn('cleanModuleDependencyFiles')
