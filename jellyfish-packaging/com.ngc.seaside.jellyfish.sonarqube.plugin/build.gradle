/*
 * UNCLASSIFIED
 *
 * Copyright 2020 Northrop Grumman Systems Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
apply plugin: 'com.iadams.sonar-packaging'
apply plugin: 'com.ngc.seaside.parent'

dependencies {
   // Do not use the new scopes (api, implementation, etc) here.
   // Use the old compile scope because the sonar-packaging plugin
   // will only embed dependencies that are under the compile scope.
   compile project(':jellyfish')

   compile "com.ngc.seaside:jellyfish.api:$version"
   compile "com.ngc.seaside:jellyfish.service.api:$version"
   compile "com.ngc.seaside:systemdescriptor.model.api:$version"
   compile "com.ngc.seaside:systemdescriptor.service.api:$version"
   compile "com.ngc.seaside:systemdescriptor.service.impl.xtext:$version"
   compile "com.ngc.seaside:jellyfish.cli.command.analyze:$version"

   compile "com.ngc.seaside:systemdescriptor.service.impl.m2repositoryservice:$version"
   compile "com.google.guava:guava:$guavaVersion"
   compile "com.google.inject:guice:$guiceVersion"
   // Make sure this has a scope of provided.
   provided "org.sonarsource.sonarqube:sonar-plugin-api:$sonarqubeVersion"

   // This is only used for an IT to make sure all findings are registered correctly.
   testCompile "com.ngc.seaside:jellyfish.cli.command.analyzeinputsoutputs:$version"
   testCompile "junit:junit:$junitVersion"
   testCompile "org.mockito:mockito-core:$mockitoVersion"
   // Include the SLF4J logging adapter so we can see logs during test execution.
   testCompile "ch.qos.logback:logback-core:1.1.7"
   testCompile "ch.qos.logback:logback-classic:1.1.7"
}

sonarPackaging {
   pluginKey = 'systemdescriptor'
   pluginName = 'SonarSystemDescriptor'
   pluginClass = 'com.ngc.seaside.jellyfish.sonarqube.JellyfishPlugin'
   pluginDescription = 'Adds support for scanning System Descriptor projects.'
   pluginUrl = ''
   pluginSourceUrl = 'https://github.ms.northgrum.com/CEACIDE/jellyfish'
   pluginLicense = 'MIT - Copyright Northrop Grumman'
}

// Build a file that lists all the modules to use when running Jellyfish.  We do this because classpath scanning
// for all instances of com.google.inject.Module declared via a ServiceLoader doesn't work within Sonarqube because
// Sonarqube uses classloader isolation to keep plugins separate.  Instead, we build the list of all modules at
// build time and just load it at runtime.
tasks.create('buildModuleDependencyFile').doLast {
   def destinationDir = "${project.buildDir.absolutePath}/dependencies"
   def tmpDir = project.mkdir("${destinationDir}/tmp").absolutePath
   def filenameToExtract = 'META-INF/services/com.google.inject.Module'

   def guiceModulesFile = project.file("${project.buildDir.absolutePath}/resources/main/guice-modules")
   guiceModulesFile.parentFile.mkdirs()
   guiceModulesFile.createNewFile()

   def modules = new HashSet<String>()

   configurations.compile.files.forEach { file ->
      if (file.path.endsWith('.jar') && project.file(file.path).exists()) {
         project.copy {
            from(zipTree(file.path)) {
               include "**/${filenameToExtract}"
               includeEmptyDirs = false
            }
            into tmpDir
         }

         def moduleFile = project.file("${tmpDir}/${filenameToExtract}")
         if (moduleFile.exists()) {
            modules.addAll(moduleFile.readLines()
                                 .stream()
                                 .map { line -> line.trim() }
                                 .filter { line -> !line.startsWith('#') }
                                 .filter { line -> !line.isEmpty() }
                                 .collect())
         }
      }
   }

   guiceModulesFile.write(modules.join('\n'))

   project.jar {
      from(guiceModulesFile.path)
   }
}

// This looks weird (instead of doing a copy task) but the Copy tasks deletes files that are already in the target
// directory.  And jar.from licenseFile copies the file to the JAR but not in the *plugin* JAR that has the updated
// manifest and dependencies for Sonarqube...
tasks.create('copyLicenseToPlugin').doLast {
   project.copy {
      from licenseFile
      into project.file("${project.buildDir.absolutePath}/resources/main")
   }
}

jar.dependsOn(buildModuleDependencyFile, copyLicenseToPlugin)
test.dependsOn(buildModuleDependencyFile)
buildModuleDependencyFile.shouldRunAfter(processResources)
