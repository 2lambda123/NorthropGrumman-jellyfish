apply plugin: 'com.ngc.seaside.repository'
apply plugin: 'com.ngc.seaside.ci'
apply plugin: 'com.ngc.seaside.eclipse.updatesite'
apply plugin: 'com.ngc.seaside.eclipse.p2'

eclipseDistribution {
   linuxVersion = 'eclipse-dsl-photon-R-linux-gtk-x86_64'
   windowsVersion = 'eclipse-dsl-photon-R-win32-x86_64'
   linuxDownloadUrl = "https://nexusrepomgr.ms.northgrum.com/repository/raw-ng-repo/ceacide/${linuxVersion}.zip"
   windowsDownloadUrl = "https://nexusrepomgr.ms.northgrum.com/repository/raw-ng-repo/ceacide/${windowsVersion}.zip"

//   unzipEclipse.doLast {
//      configurations {
//         // Exclude transitive dependencies that are already bundled with eclipse
//         plugin {
//            pluginsDirectory.eachFileMatch({ it.endsWith '.jar' }) {
//               if (!it.name.startsWith('com.google.inject')) {
//                  exclude module: it.name.substring(0, it.name.indexOf('_'))
//               }
//            }
//         }
//      }
//   }
}

eclipseUpdateSite {
   
   def sdFeature = feature {
      id = 'com.ngc.seaside.systemdescriptor.feature'
      label = 'JellyFish SystemDescriptor DSL'
      version = project.version
      providerName = 'Northrop Grumman Corporation'
      description {
         url = 'http://www.systemdescriptor.seaside.ngc.com/description'
         text = 'This is the JellyFish System Descriptor Domain Specific Language Eclipse plugin.'
      }
      copyright {
         url = 'http://www.systemdescriptor.seaside.ngc.com/copyright'
         text = project.resources.text.fromFile(project.file('src/main/resources/license.txt')).asString()
      }
      license {
         url = 'http://www.systemdescriptor.seaside.ngc.com/license'
         text = copyright.text
      }
      plugin {
         id = 'com.ngc.seaside.systemdescriptor'
         version = "${project.version}"
         unpack = false
      }
      plugin {
         id = 'com.ngc.seaside.systemdescriptor.ui'
         version = "${project.version}"
         unpack = false
      }
      plugin {
         id = 'com.ngc.seaside.systemdescriptor.ide'
         version = "${project.version}"
         unpack = false
      }
      plugin {
         id = 'com.ngc.seaside.systemdescriptor.service.impl.xtext'
         version = "${project.version}"
         unpack = false
      }
      plugin {
         id = 'com.ngc.seaside.systemdescriptor.scenario.impl.standardsteps'
         version = "${project.version}"
         unpack = false
      }

      // Our bundles above try to import the com.google.inject package.  The default version that comes with XText
      // and Eclipse is too old, so we need to ship our own version.
//      plugin {
//         id = 'com.google.inject'
//         version = "$guiceVersion"
//         unpack = false
//      }
   }

   def sdCategory = category {
      name = 'system_descriptor_category_id'
      label = 'System Descriptor Plugin'
      description = 'Eclipse Plugin for the Seaside System Descriptor'
      feature sdFeature
   }
   
   def externalUpdateSites = [
      'https://cucumber.io/cucumber-eclipse/update-site',                 // Cucumber
      'https://nodeclipse.github.io/updates/markdown',                    // Markdown editor
      // 'https://raw.github.com/satyagraha/gfm_viewer/master/p2-composite' // Markdown git viewer - really slow
   ]

   externalUpdateSites.each {
      p2.remoteRepository(it) {
         // Include all the external site plugins
         plugins { p ->
            dependencies {
               plugin p.dependency
            }
         }
         // Include all the external site features
         features { externalFeature ->
            eclipseUpdateSite.feature externalFeature
            sdCategory.feature externalFeature
         }
      }
   }
}

dependencies {
   plugin "com.ngc.seaside:systemdescriptor:$version"
   plugin "com.ngc.seaside:systemdescriptor.ide:$version"
   plugin "com.ngc.seaside:systemdescriptor.ui:$version"
   plugin "com.ngc.seaside:systemdescriptor.service.impl.xtext:$version"
   plugin "com.ngc.seaside:systemdescriptor.scenario.impl.standardsteps:$version"
   plugin "com.ngc.seaside:service.log.impl.common.log4jlogservice:$version"

   // Our stuff needs Guice.
   plugin "com.google.inject:guice:$guiceVersion"
   // These are transitive dependencies needed by Guice.  Guice does not list these items as direct dependencies.
   // However, Guice actually tries to import packages in these JARs.  Unfortunately, the official version of these
   // JARs do not contain a correct OSGi manifest, so we have to include the versions provided by Apache which have a
   // correct manifest.
   plugin 'org.apache.servicemix.bundles:org.apache.servicemix.bundles.javax-inject:1_2'
   plugin 'org.apache.servicemix.bundles:org.apache.servicemix.bundles.aopalliance:1.0_6'
}
