/*
 * UNCLASSIFIED
 *
 * Copyright 2020 Northrop Grumman Systems Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'

// We need to apply the java-gradle-plugin befre the parent plugin to avoid issues with the maven
// publish plugin.  Disable automatedPublishing from Gradle to avoid upload duplicate artifacts.
gradlePlugin {
   automatedPublishing = false
}

apply plugin: 'com.ngc.seaside.parent'

configurations {
   commandTemplate
}

dependencies {
   implementation project(':jellyfish')
   implementation project(':jellyfish.sonarqube.plugin')
   implementation "com.ngc.seaside:jellyfish.api:$version"
   implementation "com.ngc.seaside:jellyfish.utilities:$version"
   implementation "com.ngc.seaside:guice.modules:$version"
   implementation "com.ngc.seaside:jellyfish.service.impl.templateservice:$version"
   implementation "com.ngc.seaside:jellyfish.cli.command.analyze:$version"
   implementation "com.ngc.seaside:jellyfish.cli.command.consoleanalysisreport:$version"
   implementation "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqubePluginVersion"
   implementation "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:$licensePluginVersion"

   implementation gradleApi()
   implementation localGroovy()
   implementation "com.ngc.seaside:systemdescriptor.service.impl.xtext:$version"
   implementation "com.ngc.seaside:gradle.plugins:$seasidePluginsVersion"
   implementation "com.ngc.blocs:service.api:$blocsVersion"
   implementation "com.google.inject:guice:$guiceVersion"

   // This dependency is needed when applying the sonarqube plugin to a System Descriptor project
   // since it is only provided in the :jellyfish.sonarqube.plugin project
   runtimeOnly "org.sonarsource.sonarqube:sonar-plugin-api:$sonarqubeVersion"

   commandTemplate project(path: ':jellyfish', configuration: 'commandTemplate')

   testImplementation "junit:junit:$junitVersion"
   testImplementation "org.mockito:mockito-core:$mockitoVersion"
   testImplementation "com.ngc.seaside:gradle.plugins.testutils:$seasidePluginsVersion"
}

processResources {
   filesNotMatching('**/*.zip') {
      expand(version: version, group: project.group)
   }
}

task copyCommandTemplate(type: Copy) {
   from configurations.commandTemplate {
      rename { name ->
         def artifacts = configurations.commandTemplate.resolvedConfiguration.resolvedArtifacts
         def artifact = artifacts.find { it.file.name == name }
         "${artifact.moduleVersion.id.group}.${artifact.name}-${artifact.moduleVersion.id.version}-${artifact.classifier}.${artifact.extension}"
      }
   }
   into "${buildDir}/commands-templates/templates/"
}


sourceSets {
   main {
      resources {
         srcDir "${buildDir}/commands-templates/"
      }
   }
}

compileJava.dependsOn copyCommandTemplate

test.systemProperty 'nexusConsolidated', nexusConsolidated
test.systemProperty 'nexusSnapshots', nexusSnapshots
test.systemProperty 'nexusUsername', nexusUsername
test.systemProperty 'nexusPassword', nexusPassword
['javax.net.ssl.trustStore', 'http.proxyHost', 'http.proxyPort', 'http.nonProxyHosts',
 'https.proxyHost', 'https.proxyPort', 'https.nonProxyHosts', 'sonar.host.url'].each { key ->
   def value = System.properties[key]
   if (value != null && !value.isEmpty()) {
      test.systemProperty(key, System.properties[key])
   }
}
