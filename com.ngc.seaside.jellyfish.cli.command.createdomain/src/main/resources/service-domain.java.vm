/**
***************************************** UNCLASSIFIED ******************************************
*************************************************************************************************
************************* Copyright 2017 Northrop Grumman Corporation ***************************
*/
package $domain.packagename;

## Imports
#foreach( $import in $domain.imports )
import $import;
#end

import java.util.Objects;

#if($domain.hasMultipleProperty)
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
#end
#if($domain.hasArrayProperty)
import java.util.Arrays;
#end

#if($domain.abstraction)
#set($modifier = " abstract ")
#else##not an abstraction
#set($modifier = " ")
#end
#if(! $domain.extended)
public${modifier}class ${domain.classname} {
#else
public${modifier}class ${domain.classname} extends $domain.extendedClassShort {
#end
##Topic and Name

  public static final String NAME = ${domain.classname}.class.getName();

#foreach ($property in $domain.properties)
#if(!$property.abstraction)
#if(! $property.value)
#if(! $property.multiple)
  private $property.shortType $property.name;
#else##is multiple
  private List<$property.shortType> $property.name;
#end##end multiple
#else##has a value
#if(! $property.multiple)
  private $property.shortType $property.name = $property.value;
#else##is multiple
  private List<$property.shortType> $property.name = $property.value;
#end##is multiple
#end##has value
#end##is abstraction
#end##property definitions

  public ${domain.classname}() {
    super();
  }

#foreach ($property in $domain.properties)
#if(! $property.multiple)
#if(! $property.abstraction)
#if($property.shortType == "boolean")
  public $property.shortType is${property.methodString}() {
    return $property.name;
  }
#else
  public $property.shortType get${property.methodString}() {
    return $property.name;
  }
#end

  public ${domain.classname} set$property.getMethodString()($property.shortType $property.name) {
    this.$property.name = $property.name;
    return this;
  }
#end
#else
#if(! $property.abstraction)
  //@Override
  public List<$property.shortType> get${property.methodString}() {
    return $property.name;
  }

  public ${domain.classname} set$property.getMethodString()(List<$property.shortType> $property.name) {
    this.$property.name = $property.name;
    return this;
  }
#end
#end

#end##end properties
#set($size = ${domain.nonAbstractProperties.size()})
  @Override
  public int hashCode() {
    return Objects.hash(
#if($domain.extended)
#if($domain.properties.isEmpty())
      super.hashCode()
#else
      super.hashCode(),
#end##empty properties
#end##extended
#foreach ($property in $domain.nonAbstractProperties)
#if($velocityCount == $size)
       $property.name
#else
       $property.name,
#end
#end##end property loop
    );
  }

  @Override
  public boolean equals(Object obj) {
    if(obj == this) {
      return true;
    }

    if(!(obj instanceof ${domain.classname})) {
        return false;
    }
#if(${domain.properties.isEmpty()})
    return super.equals(obj);
#else
    ${domain.classname} that = (${domain.classname})obj;
#if($domain.extended)
    return super.equals(obj) &&
#else
    return
#end
#foreach ($property in $domain.nonAbstractProperties)
#if($property.arrayType)
#set($equalObj = "Arrays")
#else
#set($equalObj = "Objects")
#end
#if($velocityCount == $size)
      ${equalObj}.equals($property.name, that.$property.name)
#else
      ${equalObj}.equals($property.name, that.$property.name) &&
#end
#end
    ;
#end
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
#if($domain.extended)
    builder.append(super.toString());
#else
	builder.append(getClass().getSimpleName()).append(" - ");
#end
#foreach ($property in $domain.nonAbstractProperties)
    builder.append("[${property.name}=").append(${property.name}).append("]");
#end
    return builder.toString();
  }
}
